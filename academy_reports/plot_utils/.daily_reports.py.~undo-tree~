(undo-tree-save-format-version . 1)
"25cb6af327eb36a749309e1e262e44a6485c2898"
[nil nil nil nil (26292 61066 12837 167000) 0 nil]
([nil nil ((407 . 412) (t 26292 60144 626128 10000)) nil (26292 61066 12836 27000) 0 nil])
([nil nil ((412 . 416)) nil (26292 61066 12835 330000) 0 nil])
([nil nil ((#("u" 0 1 (ws-butler-chg chg fontified t)) . -414) (undo-tree-id15 . -1) (#("y" 0 1 (ws-butler-chg chg fontified t)) . -415) (undo-tree-id16 . -1) 416) nil (26292 61066 12834 206000) 0 nil])
([nil nil ((414 . 416)) nil (26292 61066 12832 288000) 0 nil])
([nil nil ((416 . 425)) nil (26292 61066 12831 741000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -416) (undo-tree-id14 . -1) 417) nil (26292 61066 12831 114000) 0 nil])
([nil nil ((425 . 433) (#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t)) . 425)) nil (26292 61066 12829 615000) 0 nil])
([nil nil ((455 . 464)) nil (26292 61066 12828 725000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (1 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 435 in daily_reports.py> . #<marker at 476 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg chg fontified nil) 1 2 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 435 in daily_reports.py> . #<marker at 476 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg chg fontified nil) 2 3 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 435 in daily_reports.py> . #<marker at 476 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg chg fontified nil) 3 4 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 435 in daily_reports.py> . #<marker at 476 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg chg fontified nil)) . -460) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (464 . 471)) nil (26292 61066 12827 326000) 0 nil])
([nil nil ((#("        " 0 1 (ws-butler-chg delete fontified t) 1 8 (ws-butler-chg chg fontified t)) . 416) (undo-tree-id0 . -8) (undo-tree-id1 . -8) 467) nil (26292 61066 12816 205000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 460) (undo-tree-id17 . -8) (undo-tree-id18 . -8) (undo-tree-id19 . -8) (undo-tree-id20 . -8) (undo-tree-id21 . -8) (undo-tree-id22 . -8) (undo-tree-id23 . -8) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (459 . 468) (t 26292 61066 10155 430000)) nil (26292 61067 618402 418000) 0 nil])
([nil nil ((460 . 468) (t 26292 61067 614155 478000)) nil (26292 61087 625435 623000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 460) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (#("    " 0 4 (ws-butler-chg chg fontified t)) . -464) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) 468) nil (26292 61087 625430 324000) 0 nil])
([nil nil ((nil rear-nonsticky nil 508 . 509) (nil fontified nil 460 . 509) (460 . 509) (t 26292 61087 622156 73000)) nil (26292 61244 229773 712000) 0 nil])
([nil nil ((#("#" 0 1 (face tree-sitter-hl-face:comment fontified t ws-butler-chg chg)) . -503) (undo-tree-id195 . -1) (#("+" 0 1 (face tree-sitter-hl-face:comment fontified t ws-butler-chg chg)) . -504) (undo-tree-id196 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t ws-butler-chg chg)) . -505) (undo-tree-id197 . -1) (#("n" 0 1 (face tree-sitter-hl-face:comment fontified t ws-butler-chg chg)) . -506) (undo-tree-id198 . -1) (#("d" 0 1 (face tree-sitter-hl-face:comment fontified t ws-butler-chg chg)) . -507) (undo-tree-id199 . -1) (#("_" 0 1 (face tree-sitter-hl-face:comment rear-nonsticky t fontified t ws-butler-chg chg)) . -508) (undo-tree-id200 . -1) 509) nil (26292 61244 229772 739000) 0 nil])
([nil nil ((460 . 468)) nil (26292 61244 229769 78000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -487) (undo-tree-id174 . -1) (#("c" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -488) (undo-tree-id175 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -489) (undo-tree-id176 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -490) (undo-tree-id177 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -491) (undo-tree-id178 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -492) (undo-tree-id179 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -493) (undo-tree-id180 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -494) (undo-tree-id181 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -495) (undo-tree-id182 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -496) (undo-tree-id183 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -497) (undo-tree-id184 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -498) (undo-tree-id185 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -499) (undo-tree-id186 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -500) (undo-tree-id187 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -501) (undo-tree-id188 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -502) (undo-tree-id189 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -503) (undo-tree-id190 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -504) (undo-tree-id191 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -505) (undo-tree-id192 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -506) (undo-tree-id193 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -507) (undo-tree-id194 . -1) 508) nil (26292 61244 229766 407000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -486) (undo-tree-id173 . -1) 487) nil (26292 61244 229751 837000) 0 nil])
([nil nil ((486 . 488)) nil (26292 61244 229750 695000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -486) (undo-tree-id171 . -1) (#("O" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -487) (undo-tree-id172 . -1) 488) nil (26292 61244 229750 19000) 0 nil])
([nil nil ((486 . 500)) nil (26292 61244 229747 873000) 0 nil])
([nil nil ((500 . 515)) nil (26292 61244 229747 288000) 0 nil])
([nil nil ((515 . 516)) nil (26292 61244 229746 854000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -515) (undo-tree-id170 . -1) 516) nil (26292 61244 229746 414000) 0 nil])
([nil nil ((486 . 490)) nil (26292 61244 229745 257000) 0 nil])
([nil nil ((519 . 522)) nil (26292 61244 229744 914000) 0 nil])
([nil nil ((519 . 520)) nil (26292 61244 229744 568000) 0 nil])
([nil nil ((458 . 476)) nil (26292 61244 229744 179000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -475) (undo-tree-id169 . -1) 476) nil (26292 61244 229743 235000) 0 nil])
([nil nil ((542 . 551)) nil (26292 61244 229727 181000) 0 nil])
([nil nil ((552 . 557) (t 26292 61244 230160 734000)) nil (26292 61349 927096 622000) 0 nil])
([nil nil ((557 . 561)) nil (26292 61349 927096 130000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -560) (undo-tree-id263 . -1) 561) nil (26292 61349 927095 572000) 0 nil])
([nil nil ((560 . 561)) nil (26292 61349 927094 627000) 0 nil])
([nil nil ((684 . 688)) nil (26292 61349 927094 24000) 0 nil])
([nil nil ((562 . 570) (#("    " 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 1 2 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 2 3 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 3 4 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))))) . 562) (undo-tree-id262 . -4) 566) nil (26292 61349 927093 472000) 0 nil])
([nil nil ((598 . 607)) nil (26292 61349 927092 158000) 0 nil])
([nil nil ((nil rear-nonsticky nil 702 . 703) (nil fontified nil 702 . 703) (nil fontified nil 698 . 702) (nil fontified nil 694 . 698) (nil fontified nil 693 . 694) (nil fontified nil 692 . 693) (nil fontified nil 691 . 692) (nil fontified nil 653 . 691) (nil fontified nil 652 . 653) (nil fontified nil 642 . 652) (nil fontified nil 641 . 642) (nil fontified nil 636 . 641) (nil fontified nil 635 . 636) (nil fontified nil 634 . 635) (nil fontified nil 633 . 634) (nil fontified nil 632 . 633) (nil fontified nil 631 . 632) (nil fontified nil 630 . 631) (nil fontified nil 629 . 630) (nil fontified nil 628 . 629) (nil fontified nil 627 . 628) (nil fontified nil 626 . 627) (nil fontified nil 622 . 626) (nil fontified nil 620 . 622) (nil fontified nil 619 . 620) (nil fontified nil 610 . 619) (nil fontified nil 609 . 610) (nil fontified nil 604 . 609) (nil fontified nil 603 . 604) (nil fontified nil 602 . 603) (nil fontified nil 601 . 602) (nil fontified nil 600 . 601) (nil fontified nil 599 . 600) (599 . 703)) nil (26292 61349 927091 287000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -664) (undo-tree-id249 . -1) (#("R" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -665) (undo-tree-id250 . -1) (#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -666) (undo-tree-id251 . -1) (#("P" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -667) (undo-tree-id252 . -1) (#("R" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -668) (undo-tree-id253 . -1) (#("O" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -669) (undo-tree-id254 . -1) (#("C" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -670) (undo-tree-id255 . -1) (#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -671) (undo-tree-id256 . -1) (#("S" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -672) (undo-tree-id257 . -1) (#("S" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -673) (undo-tree-id258 . -1) (#("I" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -674) (undo-tree-id259 . -1) (#("N" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -675) (undo-tree-id260 . -1) (#("G" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -676) (undo-tree-id261 . -1) 677) nil (26292 61349 927087 52000) 0 nil])
([nil nil ((664 . 667)) nil (26292 61349 927079 479000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -665) (undo-tree-id247 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -666) (undo-tree-id248 . -1) 667) nil (26292 61349 927078 774000) 0 nil])
([nil nil ((665 . 679)) nil (26292 61349 927077 138000) 0 nil])
([nil nil ((679 . 692)) nil (26292 61349 927076 518000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 692) (#("M" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 692) (#("A" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("R" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("F" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("A" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("T" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("A" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 692) (#("D" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 692) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 692)) nil (26292 61349 927075 480000) 0 nil])
([nil nil ((nil rear-nonsticky nil 847 . 848) (nil fontified nil 847 . 848) (nil fontified nil 843 . 847) (nil fontified nil 839 . 843) (nil fontified nil 838 . 839) (nil fontified nil 837 . 838) (nil fontified nil 836 . 837) (nil fontified nil 798 . 836) (nil fontified nil 797 . 798) (nil fontified nil 787 . 797) (nil fontified nil 786 . 787) (nil fontified nil 781 . 786) (nil fontified nil 780 . 781) (nil fontified nil 779 . 780) (nil fontified nil 778 . 779) (nil fontified nil 777 . 778) (nil fontified nil 776 . 777) (nil fontified nil 775 . 776) (nil fontified nil 774 . 775) (nil fontified nil 773 . 774) (nil fontified nil 772 . 773) (nil fontified nil 771 . 772) (nil fontified nil 767 . 771) (nil fontified nil 765 . 767) (nil fontified nil 764 . 765) (nil fontified nil 755 . 764) (nil fontified nil 754 . 755) (nil fontified nil 749 . 754) (nil fontified nil 748 . 749) (nil fontified nil 747 . 748) (nil fontified nil 746 . 747) (nil fontified nil 745 . 746) (nil fontified nil 744 . 745) (744 . 848)) nil (26292 61349 927073 788000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified nil)) . -713) (undo-tree-id246 . -4) (708 . 709)) nil (26292 61349 927071 255000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . -709) (undo-tree-id244 . -4) (undo-tree-id245 . -4) 713) nil (26292 61349 927069 774000) 0 nil])
([nil nil ((709 . 713)) nil (26292 61349 927068 280000) 0 nil])
([nil nil ((713 . 716)) nil (26292 61349 927067 638000) 0 nil])
([nil nil ((716 . 717)) nil (26292 61349 927067 64000) 0 nil])
([nil nil ((718 . 726) (#("    " 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 1 2 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 2 3 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 3 4 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>))))) . 718)) nil (26292 61349 927066 387000) 0 nil])
([nil nil ((nil fontified nil 857 . 858) (nil fontified nil 853 . 857) (nil fontified nil 849 . 853) (nil fontified nil 848 . 849) (nil fontified nil 847 . 848) (nil fontified nil 846 . 847) (nil fontified nil 843 . 846) (nil fontified nil 842 . 843) (nil fontified nil 803 . 842) (nil fontified nil 802 . 803) (nil fontified nil 792 . 802) (nil fontified nil 791 . 792) (nil fontified nil 786 . 791) (nil fontified nil 785 . 786) (nil fontified nil 784 . 785) (nil fontified nil 783 . 784) (nil fontified nil 782 . 783) (nil fontified nil 781 . 782) (nil fontified nil 780 . 781) (nil fontified nil 779 . 780) (nil fontified nil 778 . 779) (778 . 858)) nil (26292 61349 927065 62000) 0 nil])
([nil nil ((#("        raise ValueError(\"### ERROR PREPROCESSING DATAFRAME ###\") from exc
" 0 1 (face highlight-indent-guides-character-face display "│" fontified t ws-butler-chg chg highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 1 2 (fontified t ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 2 3 (fontified t ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 3 4 (fontified t ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 4 5 (face highlight-indent-guides-character-face display "│" fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 832 in daily_reports.py> . #<marker at 885 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 5 6 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 832 in daily_reports.py> . #<marker at 885 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 6 7 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 832 in daily_reports.py> . #<marker at 885 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 7 8 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 832 in daily_reports.py> . #<marker at 885 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 8 13 (face tree-sitter-hl-face:keyword fontified t ws-butler-chg chg) 13 14 (fontified t ws-butler-chg chg) 14 24 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified t ws-butler-chg chg) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg) 25 63 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg) 63 64 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg) 64 65 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg) 65 66 (fontified t ws-butler-chg chg) 66 70 (face tree-sitter-hl-face:keyword fontified t ws-butler-chg chg) 70 74 (fontified t ws-butler-chg chg) 74 75 (fontified t rear-nonsticky t ws-butler-chg chg)) . 858) (undo-tree-id242 . -74) (undo-tree-id243 . -74)) nil (26292 61349 927063 225000) 0 nil])
([nil nil ((857 . 862)) nil (26292 61349 927062 33000) 0 nil])
([nil nil ((nil rear-nonsticky nil 871 . 872) (nil fontified nil 871 . 872) (nil fontified nil 870 . 871) (nil fontified nil 867 . 870) (nil fontified nil 866 . 867) (nil fontified nil 865 . 866) (nil fontified nil 864 . 865) (nil fontified nil 863 . 864) (863 . 872)) nil (26292 61349 927061 597000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1019 . 1020) (nil fontified nil 1015 . 1020) (nil fontified nil 1011 . 1015) (nil fontified nil 1010 . 1011) (nil fontified nil 1009 . 1010) (nil fontified nil 1008 . 1009) (nil fontified nil 1005 . 1008) (nil fontified nil 1004 . 1005) (nil fontified nil 965 . 1004) (nil fontified nil 964 . 965) (nil fontified nil 954 . 964) (nil fontified nil 953 . 954) (nil fontified nil 948 . 953) (nil fontified nil 947 . 948) (nil fontified nil 946 . 947) (nil fontified nil 945 . 946) (nil fontified nil 944 . 945) (nil fontified nil 943 . 944) (nil fontified nil 942 . 943) (nil fontified nil 941 . 942) (nil fontified nil 940 . 941) (nil fontified nil 939 . 940) (nil fontified nil 938 . 939) (nil fontified nil 934 . 938) (nil fontified nil 932 . 934) (nil fontified nil 931 . 932) (nil fontified nil 922 . 931) (nil fontified nil 921 . 922) (nil fontified nil 916 . 921) (nil fontified nil 915 . 916) (nil fontified nil 914 . 915) (nil fontified nil 913 . 914) (nil fontified nil 912 . 913) (nil fontified nil 911 . 912) (911 . 1020)) nil (26292 61349 927060 239000) 0 nil])
([nil nil ((872 . 880) (#("    " 0 1 (face highlight-indent-guides-character-face display "│" ws-butler-chg delete fontified t highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 1 2 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 2 3 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 3 4 (fontified t highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>))))) . 872)) nil (26292 61349 927058 341000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 934 in daily_reports.py> . #<marker at 1049 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 1 2 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 934 in daily_reports.py> . #<marker at 1049 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 2 3 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 934 in daily_reports.py> . #<marker at 1049 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>)))) 3 4 (fontified t ws-butler-chg chg highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 934 in daily_reports.py> . #<marker at 1049 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1049 in daily_reports.py>))))) . -915) (undo-tree-id241 . -4) 911) nil (26292 61349 927057 887000) 0 nil])
([nil nil ((#("RASTER" 0 6 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . 985)) nil (26292 61349 927056 683000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("C" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("I" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("O" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("H" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("C" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("T" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 985) (#("H" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("G" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 985) (#("I" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#("R" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 985)) nil (26292 61349 927055 840000) 0 nil])
([nil nil ((985 . 988)) nil (26292 61349 927055 29000) 0 nil])
([nil nil ((988 . 992)) nil (26292 61349 927054 758000) 0 nil])
([nil nil ((#("GHT" 0 3 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . 832)) nil (26292 61349 927054 437000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 832) (#("C" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 832) (#("I" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 832) (#("O" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 832) (#("H" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 832) (#("C" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg delete)) . 832) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg delete)) . 832)) nil (26292 61349 927053 761000) 0 nil])
([nil nil ((#("I" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -831) (undo-tree-id240 . -1) 832) nil (26292 61349 927052 980000) 0 nil])
([nil nil ((831 . 836)) nil (26292 61349 927052 113000) 0 nil])
([nil nil ((1003 . 1007) (#("    " 0 4 (fontified nil ws-butler-chg chg)) . 1002) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (1001 . 1007)) nil (26292 61349 927051 686000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1005 . 1006) (nil fontified nil 1003 . 1006) (1003 . 1006)) nil (26292 61349 927049 925000) 0 nil])
([nil nil ((#("G" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t ws-butler-chg chg)) . -1003) (undo-tree-id234 . -1) (#("H" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t ws-butler-chg chg)) . -1004) (undo-tree-id235 . -1) (#("T" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) rear-nonsticky t fontified t ws-butler-chg chg)) . -1005) (undo-tree-id236 . -1) 1006) nil (26292 61349 927049 221000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1099 . 1100) (nil fontified nil 1095 . 1100) (nil fontified nil 1091 . 1095) (nil fontified nil 1090 . 1091) (nil fontified nil 1089 . 1090) (nil fontified nil 1088 . 1089) (nil fontified nil 1085 . 1088) (nil fontified nil 1084 . 1085) (nil fontified nil 1057 . 1084) (nil fontified nil 1056 . 1057) (nil fontified nil 1046 . 1056) (nil fontified nil 1045 . 1046) (nil fontified nil 1040 . 1045) (nil fontified nil 1039 . 1040) (nil fontified nil 1038 . 1039) (nil fontified nil 1037 . 1038) (nil fontified nil 1036 . 1037) (nil fontified nil 1035 . 1036) (nil fontified nil 1034 . 1035) (nil fontified nil 1033 . 1034) (nil fontified nil 1032 . 1033) (nil fontified nil 1031 . 1032) (nil fontified nil 1030 . 1031) (nil fontified nil 1026 . 1030) (nil fontified nil 1024 . 1026) (nil fontified nil 1023 . 1024) (nil fontified nil 1014 . 1023) (nil fontified nil 1013 . 1014) (nil fontified nil 1008 . 1013) (nil fontified nil 1007 . 1008) (nil fontified nil 1006 . 1007) (nil fontified nil 1005 . 1006) (nil fontified nil 1004 . 1005) (nil fontified nil 1003 . 1004) (1003 . 1100)) nil (26292 61349 927044 854000) 0 nil])
([nil nil ((1002 . 1007)) nil (26292 61349 927042 928000) 0 nil])
([nil nil ((1007 . 1011)) nil (26292 61349 927042 599000) 0 nil])
([nil nil ((1013 . 1021) (#("    " 0 1 (face highlight-indent-guides-character-face display "│" fontified nil ws-butler-chg chg highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 1 2 (fontified nil ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 2 3 (fontified nil ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>)))) 3 4 (fontified nil ws-butler-chg chg highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))))) . 1013) (1012 . 1013)) nil (26292 61349 927042 236000) 0 nil])
([nil nil ((#("plot_psychometrics(df)
" 0 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (fontified t)) . 1119) (undo-tree-id230 . -22) (undo-tree-id231 . -22) (undo-tree-id232 . -22) (undo-tree-id233 . -23) 1142) nil (26292 61349 927041 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1034 . 1035) (nil fontified nil 1034 . 1035) (nil fontified nil 1033 . 1034) (nil fontified nil 1031 . 1033) (nil fontified nil 1030 . 1031) (nil fontified nil 1012 . 1030) (1012 . 1035)) nil (26292 61349 927039 502000) 0 nil])
([nil nil ((1012 . 1020)) nil (26292 61349 927038 788000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (1 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 1098 in daily_reports.py> . #<marker at 1212 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t ws-butler-chg chg) 1 2 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 1098 in daily_reports.py> . #<marker at 1212 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t ws-butler-chg chg) 2 3 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 1098 in daily_reports.py> . #<marker at 1212 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t ws-butler-chg chg) 3 4 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 1098 in daily_reports.py> . #<marker at 1212 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) fontified t ws-butler-chg chg)) . -1048) (undo-tree-id229 . -4) 1052) nil (26292 61349 927038 319000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t ws-butler-chg chg)) . -1042) (undo-tree-id228 . -1) 1043) nil (26292 61349 927037 486000) 0 nil])
([nil nil ((#("L" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1117) (undo-tree-id221 . -1) (#("A" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1118) (undo-tree-id222 . -1) (#("T" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1119) (undo-tree-id223 . -1) (#("E" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1120) (undo-tree-id224 . -1) (#("N" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1121) (undo-tree-id225 . -1) (#("C" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1122) (undo-tree-id226 . -1) (#("Y" 0 1 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg)) . -1123) (undo-tree-id227 . -1) 1124) nil (26292 61349 927035 569000) 0 nil])
([nil nil ((1117 . 1128)) nil (26292 61349 927031 540000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:string fontified nil ws-butler-chg chg)) . -1127) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 1128) nil (26292 61349 927030 945000) 0 nil])
([nil nil ((1127 . 1130)) nil (26292 61349 927029 43000) 0 nil])
([nil nil ((#("

" 0 1 (fontified nil rear-nonsticky t ws-butler-chg delete) 1 2 (ws-butler-chg delete fontified nil)) . 1142) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil ws-butler-chg chg)) . 1143) (#("    " 0 1 (fontified t ws-butler-chg delete) 1 4 (fontified t ws-butler-chg chg)) . 1142) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 852) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (1155 . 1156) 1145) nil (26292 61349 927025 707000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("o" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("E" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 485) (#("e" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("u" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("l" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 485) (#("a" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 485) (#("V" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 485) (#(" " 0 1 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 495 in daily_reports.py> . #<marker at 550 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg delete fontified t)) . 485) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 485) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 485) (#("i" 0 1 (ws-butler-chg delete fontified nil)) . 485) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 485) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 485) (t 26292 61349 926163 879000)) nil (26292 61526 461275 186000) 0 nil])
([nil nil ((490 . 492) (#("(" 0 1 (face tree-sitter-hl-face:keyword ws-butler-chg chg fontified nil)) . -490) (485 . 491)) nil (26292 61526 461273 556000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -490) (undo-tree-id1383 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified t)) . 491)) nil (26292 61526 461272 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -531) (undo-tree-id1374 . -1) (#("f" 0 1 (fontified t)) . -532) (undo-tree-id1375 . -1) (#("r" 0 1 (fontified t)) . -533) (undo-tree-id1376 . -1) (#("o" 0 1 (fontified t)) . -534) (undo-tree-id1377 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -535) (undo-tree-id1378 . -1) (#(" " 0 1 (fontified t)) . -536) (undo-tree-id1379 . -1) (#("e" 0 1 (fontified t)) . -537) (undo-tree-id1380 . -1) (#("x" 0 1 (fontified t)) . -538) (undo-tree-id1381 . -1) (#("c" 0 1 (fontified t)) . -539) (undo-tree-id1382 . -1) 540) nil (26292 61526 461271 414000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 616) (#("o" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 616) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 616) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 616) (#("E" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 616) (#("e" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 616) (#("u" 0 1 (ws-butler-chg delete face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified nil)) . 616) (#("l" 0 1 (ws-butler-chg delete face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified nil)) . 616) (#("a" 0 1 (ws-butler-chg delete face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified nil)) . 616) (#("V" 0 1 (ws-butler-chg delete face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified nil)) . 616) (#(" " 0 1 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 664 in daily_reports.py> . #<marker at 724 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg delete fontified t)) . 616) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 616) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 616) (#("i" 0 1 (ws-butler-chg delete fontified t)) . 616) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 616) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 616)) nil (26292 61526 461266 240000) 0 nil])
([nil nil ((616 . 621)) nil (26292 61526 461264 165000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 760) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg delete fontified t)) . 760) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 760) (#("o" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("r" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("r" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("E" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("e" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("u" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("l" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("a" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 760) (#("V" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 760) (#(" " 0 1 (fontified t)) . 760)) nil (26292 61526 461263 161000) 0 nil])
([nil nil ((760 . 761)) nil (26292 61526 461261 91000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t)) . -760) (undo-tree-id1373 . -1) 761) nil (26292 61526 461260 249000) 0 nil])
([nil nil ((760 . 762) (#("\"" 0 1 (ws-butler-chg chg face tree-sitter-hl-face:keyword fontified nil)) . -760) (760 . 761)) nil (26292 61526 461259 178000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . 761)) nil (26292 61526 461258 633000) 0 nil])
([nil nil ((760 . 762) (#("(" 0 1 (ws-butler-chg chg face tree-sitter-hl-face:keyword fontified nil)) . -760) (760 . 761)) nil (26292 61526 461258 121000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified t)) . 761)) nil (26292 61526 461257 656000) 0 nil])
([nil nil ((760 . 765)) nil (26292 61526 461257 198000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -755) (undo-tree-id1368 . -1) (#("a" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -756) (undo-tree-id1369 . -1) (#("i" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -757) (undo-tree-id1370 . -1) (#("s" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -758) (undo-tree-id1371 . -1) (#("e" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -759) (undo-tree-id1372 . -1) 760) nil (26292 61526 461256 412000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg delete fontified t)) . 896) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 896) (#("o" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 896) (#("r" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 896) (#("r" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 896) (#("E" 0 1 (ws-butler-chg delete face tree-sitter-hl-face:function.call fontified nil)) . 896) (#("e" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 896) (#("u" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 896) (#("l" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 896) (#("a" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 896) (#("V" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 896) (#(" " 0 1 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 1002 in daily_reports.py> . #<marker at 1050 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1212 in daily_reports.py>))) ws-butler-chg delete fontified t)) . 896) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 896) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 896) (#("i" 0 1 (ws-butler-chg delete fontified t)) . 896) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 896) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 896)) nil (26292 61526 461251 611000) 0 nil])
([nil nil ((897 . 899) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -897) (897 . 898) (897 . 898) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (896 . 897)) nil (26292 61526 461250 114000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . -896) (undo-tree-id1366 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 897) (#("(" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . -897) (undo-tree-id1367 . -1) (#(")" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . 898)) nil (26292 61526 461248 870000) 0 nil])
([nil nil ((897 . 898) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (896 . 897)) nil (26292 61526 461247 398000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . -896) (undo-tree-id1365 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . 897)) nil (26292 61526 461246 409000) 0 nil])
([nil nil ((897 . 898) (nil fontified nil 896 . 897) (896 . 897) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -896) (nil fontified nil 896 . 897) (896 . 897) (#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -896) (896 . 897)) nil (26292 61526 461245 360000) 0 nil])
([nil nil ((#("\"" 0 1 (ws-butler-chg chg fontified nil)) . -896) (undo-tree-id1364 . -1) (#("\"" 0 1 (ws-butler-chg chg fontified t)) . 897)) nil (26292 61526 461244 303000) 0 nil])
([nil nil ((897 . 898) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (nil fontified nil 896 . 897) (896 . 897) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -896) (896 . 897)) nil (26292 61526 461243 264000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . -896) (undo-tree-id1363 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . 897)) nil (26292 61526 461241 956000) 0 nil])
([nil nil ((897 . 898) (nil fontified nil 896 . 897) (896 . 897) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -896) (896 . 897)) nil (26292 61526 461240 887000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified t)) . 897)) nil (26292 61526 461240 182000) 0 nil])
([nil nil ((896 . 901)) nil (26292 61526 461239 807000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -936) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("r" 0 1 (fontified t)) . -937) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("o" 0 1 (fontified t)) . -938) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -939) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#(" " 0 1 (fontified nil)) . -940) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("e" 0 1 (fontified t)) . -941) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("x" 0 1 (fontified t)) . -942) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("c" 0 1 (fontified t)) . -943) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) 944) nil (26292 61526 461238 163000) 0 nil])
([nil nil ((936 . 937)) nil (26292 61526 461223 299000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg chg fontified t)) . -936) (undo-tree-id1330 . -1) 937) nil (26292 61526 461222 772000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -801) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (#("r" 0 1 (fontified t)) . -802) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("o" 0 1 (fontified t)) . -803) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -804) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (#(" " 0 1 (fontified nil)) . -805) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("e" 0 1 (fontified t)) . -806) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#("x" 0 1 (fontified t)) . -807) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("c" 0 1 (fontified t)) . -808) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) 809) nil (26292 61526 461220 738000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -668) (undo-tree-id1306 . -1) (#("r" 0 1 (fontified t)) . -669) (undo-tree-id1307 . -1) (#("o" 0 1 (fontified t)) . -670) (undo-tree-id1308 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -671) (undo-tree-id1309 . -1) (#(" " 0 1 (fontified t)) . -672) (undo-tree-id1310 . -1) (#("e" 0 1 (fontified t)) . -673) (undo-tree-id1311 . -1) (#("x" 0 1 (fontified t)) . -674) (undo-tree-id1312 . -1) (#("c" 0 1 (fontified t)) . -675) (undo-tree-id1313 . -1) 676) nil (26292 61526 461209 279000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("o" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("r" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("E" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 999) (#("e" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("u" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("l" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("a" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg delete fontified t)) . 999) (#("V" 0 1 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) ws-butler-chg delete fontified t)) . 999) (#(" " 0 1 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 1158 in daily_reports.py> . #<marker at 1211 in daily_reports.py>) (#<marker at 426 in daily_reports.py> . #<marker at 1211 in daily_reports.py>))) ws-butler-chg delete fontified t)) . 999) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 999) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 999) (#("i" 0 1 (ws-butler-chg delete fontified t)) . 999) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 999) (#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 999)) nil (26292 61526 461203 669000) 0 nil])
([nil nil ((999 . 1004)) nil (26292 61526 461202 509000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1044) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("f" 0 1 (fontified t)) . -1045) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("r" 0 1 (fontified t)) . -1046) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#("o" 0 1 (fontified t)) . -1047) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1048) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#(" " 0 1 (fontified t)) . -1049) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("e" 0 1 (fontified t)) . -1050) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (#("x" 0 1 (fontified t)) . -1051) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("c" 0 1 (fontified t)) . -1052) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) 1053) nil (26292 61526 461185 105000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 917) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#(" " 0 1 (fontified t)) . 791) (undo-tree-id267 . -1) (#(" " 0 1 (fontified t)) . 667) 1044) nil (26292 61526 460336 396000) 0 nil])
([nil nil ((nil rear-nonsticky nil 829 . 830) (nil fontified nil 829 . 830) (nil fontified nil 828 . 829) (nil fontified nil 827 . 828) (nil fontified nil 826 . 827) (nil fontified nil 816 . 826) (nil fontified nil 806 . 816) (nil fontified nil 805 . 806) (nil fontified nil 800 . 805) (nil fontified nil 799 . 800) (nil fontified nil 798 . 799) (nil fontified nil 797 . 798) (nil fontified nil 796 . 797) (nil fontified nil 795 . 796) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 792 . 793) (792 . 830) (t 26292 61526 462169 133000)) nil (26292 61640 864212 923000) 0 nil])
([nil nil ((nil rear-nonsticky nil 993 . 994) (nil fontified nil 993 . 994) (nil fontified nil 992 . 993) (nil fontified nil 991 . 992) (nil fontified nil 990 . 991) (nil fontified nil 980 . 990) (nil fontified nil 970 . 980) (nil fontified nil 969 . 970) (nil fontified nil 964 . 969) (nil fontified nil 963 . 964) (nil fontified nil 962 . 963) (nil fontified nil 961 . 962) (nil fontified nil 960 . 961) (nil fontified nil 959 . 960) (nil fontified nil 958 . 959) (nil fontified nil 957 . 958) (nil fontified nil 956 . 957) (956 . 994)) nil (26292 61640 864211 486000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1155 . 1156) (nil fontified nil 1155 . 1156) (nil fontified nil 1154 . 1155) (nil fontified nil 1153 . 1154) (nil fontified nil 1152 . 1153) (nil fontified nil 1142 . 1152) (nil fontified nil 1132 . 1142) (nil fontified nil 1131 . 1132) (nil fontified nil 1126 . 1131) (nil fontified nil 1125 . 1126) (nil fontified nil 1124 . 1125) (nil fontified nil 1123 . 1124) (nil fontified nil 1122 . 1123) (nil fontified nil 1121 . 1122) (nil fontified nil 1120 . 1121) (nil fontified nil 1119 . 1120) (nil fontified nil 1118 . 1119) (1118 . 1156)) nil (26292 61640 864210 187000) 0 nil])
([nil nil ((nil rear-nonsticky nil 705 . 706) (nil fontified nil 705 . 706) (nil fontified nil 704 . 705) (nil fontified nil 703 . 704) (nil fontified nil 702 . 703) (nil fontified nil 692 . 702) (nil fontified nil 682 . 692) (nil fontified nil 681 . 682) (nil fontified nil 676 . 681) (nil fontified nil 675 . 676) (nil fontified nil 674 . 675) (nil fontified nil 673 . 674) (nil fontified nil 672 . 673) (nil fontified nil 671 . 672) (nil fontified nil 670 . 671) (nil fontified nil 669 . 670) (nil fontified nil 668 . 669) (668 . 706)) nil (26292 61640 864208 352000) 0 nil])
([nil nil ((nil rear-nonsticky nil 569 . 570) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 566 . 567) (nil fontified nil 556 . 566) (nil fontified nil 546 . 556) (nil fontified nil 545 . 546) (nil fontified nil 540 . 545) (nil fontified nil 539 . 540) (nil fontified nil 538 . 539) (nil fontified nil 537 . 538) (nil fontified nil 536 . 537) (nil fontified nil 535 . 536) (nil fontified nil 534 . 535) (nil fontified nil 533 . 534) (nil fontified nil 532 . 533) (532 . 570)) nil (26292 61640 864206 738000) 0 nil])
([nil nil ((1 . 2)) nil (26292 61640 864205 262000) 0 nil])
([nil nil ((1 . 17)) nil (26292 61640 864204 339000) 0 nil])
([nil current ((17 . 18)) nil (26292 61640 864199 140000) 0 nil])
nil
