(undo-tree-save-format-version . 1)
"83a7397337c436ba47f5253f5f52db1a3f55071e"
[nil nil nil nil (26292 37035 464207 300000) 0 nil]
([nil nil ((1 . 2) (t 26292 36872 511828 433000)) nil (26292 37035 464205 763000) 0 nil])
([nil nil ((#("q" 0 1 (ws-butler-chg chg fontified t)) . -1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 2) nil (26292 37035 464201 977000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 662) (t 26292 37035 472338 962000)) nil (26292 37108 934360 885000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 662)) nil (26292 37108 934350 86000) 0 nil])
([nil nil ((1 . 13488) (#("from academy_reports import utils
from academy_reports import settings
from academy_reports import arg
import os
import pandas as pd
from datetime import timedelta, datetime

from report_tasks.S1 import daily_report_S1
from report_tasks.S2 import daily_report_S2
from report_tasks.S3 import daily_report_S3
from report_tasks.S4_5 import daily_report_S4_5
from report_tasks.water_calibration import report_water_calibration
from report_tasks.intersession import intersession
from report_tasks.temperature_reports import temperature_reports

import warnings
import traceback
from matplotlib.backends.backend_pdf import PdfPages
warnings.filterwarnings('ignore')


# MAIN
def main():


    #################################### DAILY & INTERSESSIONS ####################################
    print('')
    print('Generating dailies')


    # first we try to make a manual report by passing the path of a csv
    try:

        path = arg.file[0]
        file_name = os.path.basename(path)
        file_name = file_name.split(\".\")[0]

        df = pd.read_csv(path, sep=';')

        subject = df.subject.iloc[0]
        task = df.task.iloc[0]
        date = datetime.fromtimestamp(df.TRIAL_START.iloc[0]).strftime(\"%Y%m%d-%H%M%S\")

        save_directory = os.path.join(settings.save_directory_manual, subject)

        if not os.path.exists(save_directory):
            os.makedirs(save_directory)

        file_name = file_name + '.pdf'
        save_path = os.path.join(save_directory, file_name)

        if task == 'S3':
            daily_report_S3(df, save_path, date)
        elif task == 'S4_1':
            daily_report_S4_5(df, save_path, date)
        else:
            print('Task not found for file:', path, 'task:', task)

        print(\"succesfully manual report for file: \", path)

    # if path is not passed do for all the csvs
    except:

        print(\"---   starting water calibration plot\")
        try:
            calibration_path = settings.calibration_path # the path is on the \"setting\" file
            df = pd.read_csv(calibration_path, sep=';')
            save_path = calibration_path[:-3] + 'pdf'
            report_water_calibration(df, save_path)
            print(\"---   water calibration plot succesfully done\")
        except Exception as error:
            print(traceback.format_exc())
            print(\"---   error in water calibration plot\")



        raw_paths = utils.path_generator(settings.data_directory, '.csv')

        if not os.path.exists(settings.data_directory):
            os.makedirs(settings.data_directory)

        dfs = []
        for path in raw_paths:

            #sort, only analyze general csvs
            subject = os.path.basename(path)
            # print(subject)
            if len(subject) <= 10:
                df = pd.read_csv(path, sep=';')
                dfs.append(df)

                subject, ext = os.path.splitext(subject)
                print('')
                print('Starting intersession report ' + str(subject))

                save_directory = os.path.join(settings.save_directory, subject)
                if not os.path.exists(save_directory):
                    os.makedirs(save_directory)


                #file_name_intersession = subject + '_intersession.pdf'
                #save_path_intersession = os.path.join(save_directory, file_name_intersession)
                #intersession(df.copy(), save_path_intersession)
                #print('intersession correct for subject: ', str(subject))
                
                # INTERSESSIONS
                try:
                    file_name_intersession = subject + '_intersession.pdf'
                    save_path_intersession = os.path.join(save_directory, file_name_intersession)
                    intersession(df.copy(), save_path_intersession)
                    print('intersession correct for subject: ', str(subject))
                except:
                    print('Error performing the intersession for the subject: ', str(subject))
                    pass
                

                # DAILY REPORTS
                for sess, session in df.groupby('session'):
                    subject = session.subject.iloc[0]
                    task = session.task.iloc[0]
                    stage = session.stage.iloc[0]
                    try:
                        date = datetime.fromtimestamp(session.TRIAL_START.iloc[0]).strftime(\"%Y%m%d-%H%M%S\")
                    except:
                        date = session.TRIAL_START.iloc[0]

                    file_name = subject + '_' + task + '-' + str(stage) + '_' + date + '.pdf'

                    print(\"checking file: \", file_name)
                    save_path = os.path.join(save_directory, file_name)

                    if not os.path.exists(save_path): #ONLY DONE IF NOT EXISTS

                        
                        if task == 'S1':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S1(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)
                        elif task == 'S2':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S2(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)                        
                        elif task == 'S3':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S3(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_1':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)


                        elif task == 'S4_2':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_3':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_4':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_5':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)
                        
                        elif task == 'S4_5_batchA':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_5_batchA':
                                print('Doing daily for file:', file_name)
                                try:
                                    daily_report_S4_5(session.copy(), save_path, date)
                                    print('correct daily for file:', file_name)
                                except Exception as error:
                                    print(traceback.format_exc())
                                    pdf_pages = PdfPages(save_path)
                                    pdf_pages.close()
                                    print('Error daily for file:', file_name)

                        elif task == 'S4_5_single_pulse':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)

                        elif task == 'S4_5_train_pulse':
                            print('Doing daily for file:', file_name)
                            try:
                                daily_report_S4_5(session.copy(), save_path, date)
                                print('correct daily for file:', file_name)
                            except Exception as error:
                                print(traceback.format_exc())
                                pdf_pages = PdfPages(save_path)
                                pdf_pages.close()
                                print('Error daily for file:', file_name)


                    else:
                        print('Already done!')

        # GLOBAL DF
        print('Generating global df')
        global_df = pd.concat(dfs)
        save_directory = os.path.join(settings.data_directory)
        if not os.path.exists(save_directory):
            os.makedirs(save_directory)
        utils.create_csv(global_df, save_directory + '/global_trials.csv')
        print('END!')
#################################### TEMPERATURE & HUMIDITY REPORTS ####################################
    # try:
    print('')
    print('Generating temperature reports')
    df = pd.read_csv(settings.data_directory3, sep=';')

    date_format = '%Y/%m/%d %H:%M:%S'
    df['date_format'] = df['date'].apply(lambda x: datetime.strptime(x, date_format).date())
    last_date = df['date_format'].iloc[-1]
    

    filename = 'temperatures_' + str(last_date) + '.pdf'
    save_path = os.path.join(settings.save_directory3, filename)

    temperature_reports(df, last_date, save_path, settings.setup)

# MAIN
if __name__ == \"__main__\":
    main()

" 0 1 (face tree-sitter-hl-face:keyword fontified t) 1 4 (face tree-sitter-hl-face:keyword fontified t) 4 21 (fontified t) 21 27 (face tree-sitter-hl-face:keyword fontified t) 27 34 (fontified t) 34 38 (face tree-sitter-hl-face:keyword fontified t) 38 55 (fontified t) 55 61 (face tree-sitter-hl-face:keyword fontified t) 61 71 (fontified t) 71 75 (face tree-sitter-hl-face:keyword fontified t) 75 92 (fontified t) 92 98 (face tree-sitter-hl-face:keyword fontified t) 98 103 (fontified t) 103 109 (face tree-sitter-hl-face:keyword fontified t) 109 113 (fontified t) 113 119 (face tree-sitter-hl-face:keyword fontified t) 119 127 (fontified t) 127 129 (face tree-sitter-hl-face:keyword fontified t) 129 133 (fontified t) 133 137 (face tree-sitter-hl-face:keyword fontified t) 137 147 (fontified t) 147 153 (face tree-sitter-hl-face:keyword fontified t) 153 175 (fontified t) 175 179 (face tree-sitter-hl-face:keyword fontified t) 179 193 (fontified t) 193 195 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t) 195 196 (fontified t) 196 202 (face tree-sitter-hl-face:keyword fontified t) 202 219 (fontified t) 219 223 (face tree-sitter-hl-face:keyword fontified t) 223 237 (fontified t) 237 239 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t) 239 240 (fontified t) 240 246 (face tree-sitter-hl-face:keyword fontified t) 246 263 (fontified t) 263 267 (face tree-sitter-hl-face:keyword fontified t) 267 281 (fontified t) 281 283 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t) 283 284 (fontified t) 284 290 (face tree-sitter-hl-face:keyword fontified t) 290 307 (fontified t) 307 311 (face tree-sitter-hl-face:keyword fontified t) 311 325 (fontified t) 325 329 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t) 329 330 (fontified t) 330 336 (face tree-sitter-hl-face:keyword fontified t) 336 355 (fontified t) 355 359 (face tree-sitter-hl-face:keyword fontified t) 359 391 (fontified t) 391 397 (face tree-sitter-hl-face:keyword fontified t) 397 423 (fontified t) 423 427 (face tree-sitter-hl-face:keyword fontified t) 427 454 (fontified t) 454 460 (face tree-sitter-hl-face:keyword fontified t) 460 474 (fontified t) 474 478 (face tree-sitter-hl-face:keyword fontified t) 478 512 (fontified t) 512 518 (face tree-sitter-hl-face:keyword fontified t) 518 540 (fontified t) 540 546 (face tree-sitter-hl-face:keyword fontified t) 546 556 (fontified t) 556 562 (face tree-sitter-hl-face:keyword fontified t) 562 573 (fontified t) 573 577 (face tree-sitter-hl-face:keyword fontified t) 577 610 (fontified t) 610 616 (face tree-sitter-hl-face:keyword fontified t) 616 617 (fontified t) 617 625 (face tree-sitter-hl-face:constructor fontified t) 625 635 (fontified t) 635 649 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 649 650 (face (rainbow-delimiters-depth-1-face) fontified t) 650 658 (face tree-sitter-hl-face:string fontified t) 658 659 (face (rainbow-delimiters-depth-1-face) fontified t) 659 661 (fontified t) 661 662 (fontified t) 662 668 (face tree-sitter-hl-face:comment fontified t) 668 669 (fontified t) 669 672 (face tree-sitter-hl-face:keyword fontified t) 672 673 (fontified t) 673 677 (face tree-sitter-hl-face:function fontified t) 677 678 (face (rainbow-delimiters-depth-1-face) fontified t) 678 679 (face (rainbow-delimiters-depth-1-face) fontified t) 679 687 (fontified t) 687 782 (face tree-sitter-hl-face:comment fontified t) 782 787 (fontified t) 787 792 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 792 793 (face (rainbow-delimiters-depth-1-face) fontified t) 793 795 (face tree-sitter-hl-face:string fontified t) 795 796 (face (rainbow-delimiters-depth-1-face) fontified t) 796 801 (fontified t) 801 806 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 806 807 (face (rainbow-delimiters-depth-1-face) fontified t) 807 827 (face tree-sitter-hl-face:string fontified t) 827 828 (face (rainbow-delimiters-depth-1-face) fontified t) 828 835 (fontified t) 835 902 (face tree-sitter-hl-face:comment fontified t) 902 907 (fontified t) 907 910 (face tree-sitter-hl-face:keyword fontified t) 910 921 (fontified t) 921 925 (face tree-sitter-hl-face:variable fontified t) 925 926 (fontified t) 926 927 (face tree-sitter-hl-face:operator fontified t) 927 932 (fontified t) 932 936 (face tree-sitter-hl-face:property fontified t) 936 937 (face (rainbow-delimiters-depth-1-face) fontified t) 937 938 (face tree-sitter-hl-face:number fontified t) 938 939 (face (rainbow-delimiters-depth-1-face) fontified t) 939 948 (fontified t) 948 957 (face tree-sitter-hl-face:variable fontified t) 957 958 (fontified t) 958 959 (face tree-sitter-hl-face:operator fontified t) 959 963 (fontified t) 963 967 (face tree-sitter-hl-face:property fontified t) 967 968 (fontified t) 968 976 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 976 977 (face (rainbow-delimiters-depth-1-face) fontified t) 977 981 (fontified t) 981 982 (face (rainbow-delimiters-depth-1-face) fontified t) 982 991 (fontified t) 991 1000 (face tree-sitter-hl-face:variable fontified t) 1000 1001 (fontified t) 1001 1002 (face tree-sitter-hl-face:operator fontified t) 1002 1013 (fontified t) 1013 1018 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1018 1019 (face (rainbow-delimiters-depth-1-face) fontified t) 1019 1022 (face tree-sitter-hl-face:string fontified t) 1022 1023 (face (rainbow-delimiters-depth-1-face) fontified t) 1023 1024 (face (rainbow-delimiters-depth-1-face) fontified t) 1024 1025 (face tree-sitter-hl-face:number fontified t) 1025 1026 (face (rainbow-delimiters-depth-1-face) fontified t) 1026 1036 (fontified t) 1036 1038 (face tree-sitter-hl-face:variable fontified t) 1038 1039 (fontified t) 1039 1040 (face tree-sitter-hl-face:operator fontified t) 1040 1044 (fontified t) 1044 1052 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1052 1053 (face (rainbow-delimiters-depth-1-face) fontified t) 1053 1059 (fontified t) 1059 1062 (face tree-sitter-hl-face:label fontified t) 1062 1063 (face tree-sitter-hl-face:operator fontified t) 1063 1066 (face tree-sitter-hl-face:string fontified t) 1066 1067 (face (rainbow-delimiters-depth-1-face) fontified t) 1067 1077 (fontified t) 1077 1084 (face tree-sitter-hl-face:variable fontified t) 1084 1085 (fontified t) 1085 1086 (face tree-sitter-hl-face:operator fontified t) 1086 1090 (fontified t) 1090 1097 (face tree-sitter-hl-face:property fontified t) 1097 1098 (fontified t) 1098 1102 (face tree-sitter-hl-face:property fontified t) 1102 1103 (face (rainbow-delimiters-depth-1-face) fontified t) 1103 1104 (face tree-sitter-hl-face:number fontified t) 1104 1105 (face (rainbow-delimiters-depth-1-face) fontified t) 1105 1114 (fontified t) 1114 1118 (face tree-sitter-hl-face:variable fontified t) 1118 1119 (fontified t) 1119 1120 (face tree-sitter-hl-face:operator fontified t) 1120 1124 (fontified t) 1124 1128 (face tree-sitter-hl-face:property fontified t) 1128 1129 (fontified t) 1129 1133 (face tree-sitter-hl-face:property fontified t) 1133 1134 (face (rainbow-delimiters-depth-1-face) fontified t) 1134 1135 (face tree-sitter-hl-face:number fontified t) 1135 1136 (face (rainbow-delimiters-depth-1-face) fontified t) 1136 1145 (fontified t) 1145 1149 (face tree-sitter-hl-face:variable fontified t) 1149 1150 (fontified t) 1150 1151 (face tree-sitter-hl-face:operator fontified t) 1151 1161 (fontified t) 1161 1174 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1174 1175 (face (rainbow-delimiters-depth-1-face) fontified t) 1175 1178 (fontified t) 1178 1189 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property) fontified t) 1189 1190 (fontified t) 1190 1194 (face tree-sitter-hl-face:property fontified t) 1194 1195 (face (rainbow-delimiters-depth-2-face) fontified t) 1195 1196 (face tree-sitter-hl-face:number fontified t) 1196 1197 (face (rainbow-delimiters-depth-2-face) fontified t) 1197 1198 (face (rainbow-delimiters-depth-1-face) fontified t) 1198 1199 (fontified t) 1199 1207 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1207 1208 (face (rainbow-delimiters-depth-1-face) fontified t) 1208 1223 (face tree-sitter-hl-face:string fontified t) 1223 1224 (face (rainbow-delimiters-depth-1-face) fontified t) 1224 1234 (fontified t) 1234 1248 (face tree-sitter-hl-face:variable fontified t) 1248 1249 (fontified t) 1249 1250 (face tree-sitter-hl-face:operator fontified t) 1250 1254 (fontified t) 1254 1258 (face tree-sitter-hl-face:property fontified t) 1258 1259 (fontified t) 1259 1263 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1263 1264 (face (rainbow-delimiters-depth-1-face) fontified t) 1264 1273 (fontified t) 1273 1294 (face tree-sitter-hl-face:property fontified t) 1294 1303 (fontified t) 1303 1304 (face (rainbow-delimiters-depth-1-face) fontified t) 1304 1314 (fontified t) 1314 1316 (face tree-sitter-hl-face:keyword fontified t) 1316 1317 (fontified t) 1317 1320 (face tree-sitter-hl-face:operator fontified t) 1320 1324 (fontified t) 1324 1328 (face tree-sitter-hl-face:property fontified t) 1328 1329 (fontified t) 1329 1335 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1335 1336 (face (rainbow-delimiters-depth-1-face) fontified t) 1336 1350 (fontified t) 1350 1351 (face (rainbow-delimiters-depth-1-face) fontified t) 1351 1368 (fontified t) 1368 1376 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1376 1377 (face (rainbow-delimiters-depth-1-face) fontified t) 1377 1391 (fontified t) 1391 1392 (face (rainbow-delimiters-depth-1-face) fontified t) 1392 1402 (fontified t) 1402 1411 (face tree-sitter-hl-face:variable fontified t) 1411 1412 (fontified t) 1412 1413 (face tree-sitter-hl-face:operator fontified t) 1413 1424 (fontified t) 1424 1425 (face tree-sitter-hl-face:operator fontified t) 1425 1426 (fontified t) 1426 1432 (face tree-sitter-hl-face:string fontified t) 1432 1441 (fontified t) 1441 1450 (face tree-sitter-hl-face:variable fontified t) 1450 1451 (fontified t) 1451 1452 (face tree-sitter-hl-face:operator fontified t) 1452 1456 (fontified t) 1456 1460 (face tree-sitter-hl-face:property fontified t) 1460 1461 (fontified t) 1461 1465 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 1465 1466 (face (rainbow-delimiters-depth-1-face) fontified t) 1466 1491 (fontified t) 1491 1492 (face (rainbow-delimiters-depth-1-face) fontified t) 1492 1498 (fontified t) 1498 1502 (fontified t) 1502 1504 (face tree-sitter-hl-face:keyword fontified t) 1504 1510 (fontified t) 1510 1512 (face tree-sitter-hl-face:operator fontified t) 1512 1513 (fontified t) 1513 1517 (face tree-sitter-hl-face:string fontified t) 1517 1531 (fontified t) 1531 1532 (face tree-sitter-hl-face:function.call fontified t) 1532 1546 (face tree-sitter-hl-face:function.call fontified t) 1546 1547 (face (rainbow-delimiters-depth-1-face) fontified t) 1547 1566 (fontified t) 1566 1567 (face (rainbow-delimiters-depth-1-face) fontified t) 1567 1576 (fontified t) 1576 1580 (face tree-sitter-hl-face:keyword fontified t) 1580 1586 (fontified t) 1586 1588 (face tree-sitter-hl-face:operator fontified t) 1588 1589 (fontified t) 1589 1595 (face tree-sitter-hl-face:string fontified t) 1595 1609 (fontified t) 1609 1626 (face tree-sitter-hl-face:function.call fontified t) 1626 1627 (face (rainbow-delimiters-depth-1-face) fontified t) 1627 1646 (fontified t) 1646 1647 (face (rainbow-delimiters-depth-1-face) fontified t) 1647 1656 (fontified t) 1656 1660 (face tree-sitter-hl-face:keyword fontified t) 1660 1674 (fontified t) 1674 1679 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 1679 1680 (face (rainbow-delimiters-depth-1-face) fontified t) 1680 1706 (face tree-sitter-hl-face:string fontified t) 1706 1714 (fontified t) 1714 1721 (face tree-sitter-hl-face:string fontified t) 1721 1727 (fontified t) 1727 1728 (face (rainbow-delimiters-depth-1-face) fontified t) 1728 1738 (fontified t) 1738 1743 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 1743 1744 (face (rainbow-delimiters-depth-1-face) fontified t) 1744 1782 (face tree-sitter-hl-face:string fontified t) 1782 1788 (fontified t) 1788 1789 (face (rainbow-delimiters-depth-1-face) fontified t) 1789 1795 (fontified t) 1795 1838 (face tree-sitter-hl-face:comment fontified t) 1838 1843 (fontified t) 1843 1849 (face tree-sitter-hl-face:keyword fontified t) 1849 1860 (fontified t) 1860 1865 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 1865 1866 (face (rainbow-delimiters-depth-1-face) fontified t) 1866 1905 (face tree-sitter-hl-face:string fontified t) 1905 1906 (face (rainbow-delimiters-depth-1-face) fontified t) 1906 1915 (fontified t) 1915 1918 (face tree-sitter-hl-face:keyword fontified t) 1918 1932 (fontified t) 1932 1948 (face tree-sitter-hl-face:variable fontified t) 1948 1949 (fontified t) 1949 1950 (face tree-sitter-hl-face:operator fontified t) 1950 1960 (fontified t) 1960 1976 (face tree-sitter-hl-face:property fontified t) 1976 1977 (fontified t) 1977 2012 (face tree-sitter-hl-face:comment fontified t) 2012 2025 (fontified t) 2025 2027 (face tree-sitter-hl-face:variable fontified t) 2027 2028 (fontified t) 2028 2029 (face tree-sitter-hl-face:operator fontified t) 2029 2033 (fontified t) 2033 2041 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 2041 2042 (face (rainbow-delimiters-depth-1-face) fontified t) 2042 2060 (fontified t) 2060 2063 (face tree-sitter-hl-face:label fontified t) 2063 2064 (face tree-sitter-hl-face:operator fontified t) 2064 2067 (face tree-sitter-hl-face:string fontified t) 2067 2068 (face (rainbow-delimiters-depth-1-face) fontified t) 2068 2081 (fontified t) 2081 2090 (face tree-sitter-hl-face:variable fontified t) 2090 2091 (fontified t) 2091 2092 (face tree-sitter-hl-face:operator fontified t) 2092 2109 (fontified t) 2109 2110 (face (rainbow-delimiters-depth-1-face) fontified t) 2110 2111 (fontified t) 2111 2112 (face tree-sitter-hl-face:operator fontified t) 2112 2113 (face tree-sitter-hl-face:number fontified t) 2113 2114 (face (rainbow-delimiters-depth-1-face) fontified t) 2114 2115 (fontified t) 2115 2116 (face tree-sitter-hl-face:operator fontified t) 2116 2117 (fontified t) 2117 2122 (face tree-sitter-hl-face:string fontified t) 2122 2135 (fontified t) 2135 2159 (face tree-sitter-hl-face:function.call fontified t) 2159 2160 (face (rainbow-delimiters-depth-1-face) fontified t) 2160 2161 (fontified t) 2161 2162 (fontified t) 11633 11638 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 11638 11639 (face (rainbow-delimiters-depth-1-face)) 11639 11662 (face tree-sitter-hl-face:string) 11673 11674 (face (rainbow-delimiters-depth-1-face)) 11700 11704 (face tree-sitter-hl-face:keyword) 11710 11712 (face tree-sitter-hl-face:operator) 11713 11731 (face tree-sitter-hl-face:string) 11761 11766 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 11766 11767 (face (rainbow-delimiters-depth-1-face)) 11767 11790 (face tree-sitter-hl-face:string) 11801 11802 (face (rainbow-delimiters-depth-1-face)) 11831 11834 (face tree-sitter-hl-face:keyword) 11868 11885 (face tree-sitter-hl-face:function.call) 11885 11886 (face (rainbow-delimiters-depth-1-face)) 11894 11898 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 11898 11899 (face (rainbow-delimiters-depth-2-face)) 11899 11900 (face (rainbow-delimiters-depth-2-face)) 11917 11918 (face (rainbow-delimiters-depth-1-face)) 11951 11956 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 11956 11957 (face (rainbow-delimiters-depth-1-face)) 11957 11982 (face tree-sitter-hl-face:string) 11993 11994 (face (rainbow-delimiters-depth-1-face)) 12023 12029 (face tree-sitter-hl-face:keyword) 12030 12039 (face tree-sitter-hl-face:constructor) 12040 12042 (face tree-sitter-hl-face:keyword) 12082 12087 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12087 12088 (face (rainbow-delimiters-depth-1-face)) 12098 12108 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12108 12109 (face (rainbow-delimiters-depth-2-face)) 12109 12110 (face (rainbow-delimiters-depth-2-face)) 12110 12111 (face (rainbow-delimiters-depth-1-face)) 12144 12153 (face tree-sitter-hl-face:variable) 12154 12155 (face tree-sitter-hl-face:operator) 12156 12164 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 12164 12165 (face (rainbow-delimiters-depth-1-face)) 12174 12175 (face (rainbow-delimiters-depth-1-face)) 12218 12223 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12223 12224 (face (rainbow-delimiters-depth-1-face)) 12224 12225 (face (rainbow-delimiters-depth-1-face)) 12258 12263 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12263 12264 (face (rainbow-delimiters-depth-1-face)) 12264 12287 (face tree-sitter-hl-face:string) 12298 12299 (face (rainbow-delimiters-depth-1-face)) 12322 12326 (face tree-sitter-hl-face:keyword) 12352 12357 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12357 12358 (face (rainbow-delimiters-depth-1-face)) 12358 12373 (face tree-sitter-hl-face:string) 12373 12374 (face (rainbow-delimiters-depth-1-face)) 12384 12395 (face tree-sitter-hl-face:comment) 12404 12409 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12409 12410 (face (rainbow-delimiters-depth-1-face)) 12410 12432 (face tree-sitter-hl-face:string) 12432 12433 (face (rainbow-delimiters-depth-1-face)) 12442 12451 (face tree-sitter-hl-face:variable) 12452 12453 (face tree-sitter-hl-face:operator) 12457 12463 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12463 12464 (face (rainbow-delimiters-depth-1-face)) 12467 12468 (face (rainbow-delimiters-depth-1-face)) 12477 12491 (face tree-sitter-hl-face:variable) 12492 12493 (face tree-sitter-hl-face:operator) 12497 12501 (face tree-sitter-hl-face:property) 12502 12506 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12506 12507 (face (rainbow-delimiters-depth-1-face)) 12516 12530 (face tree-sitter-hl-face:property) 12530 12531 (face (rainbow-delimiters-depth-1-face)) 12540 12542 (face tree-sitter-hl-face:keyword) 12543 12546 (face tree-sitter-hl-face:operator) 12550 12554 (face tree-sitter-hl-face:property) 12555 12561 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12561 12562 (face (rainbow-delimiters-depth-1-face)) 12576 12577 (face (rainbow-delimiters-depth-1-face)) 12594 12602 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12602 12603 (face (rainbow-delimiters-depth-1-face)) 12617 12618 (face (rainbow-delimiters-depth-1-face)) 12633 12643 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12643 12644 (face (rainbow-delimiters-depth-1-face)) 12670 12671 (face tree-sitter-hl-face:operator) 12672 12692 (face tree-sitter-hl-face:string) 12692 12693 (face (rainbow-delimiters-depth-1-face)) 12702 12707 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12707 12708 (face (rainbow-delimiters-depth-1-face)) 12708 12714 (face tree-sitter-hl-face:string) 12714 12715 (face (rainbow-delimiters-depth-1-face)) 12716 12820 (face tree-sitter-hl-face:comment) 12825 12831 (face tree-sitter-hl-face:comment) 12836 12841 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12841 12842 (face (rainbow-delimiters-depth-1-face)) 12842 12844 (face tree-sitter-hl-face:string) 12844 12845 (face (rainbow-delimiters-depth-1-face)) 12850 12855 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 12855 12856 (face (rainbow-delimiters-depth-1-face)) 12856 12888 (face tree-sitter-hl-face:string) 12888 12889 (face (rainbow-delimiters-depth-1-face)) 12894 12896 (face tree-sitter-hl-face:variable) 12897 12898 (face tree-sitter-hl-face:operator) 12902 12910 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 12910 12911 (face (rainbow-delimiters-depth-1-face)) 12920 12935 (face tree-sitter-hl-face:property) 12937 12940 (face tree-sitter-hl-face:label) 12940 12941 (face tree-sitter-hl-face:operator) 12941 12944 (face tree-sitter-hl-face:string) 12944 12945 (face (rainbow-delimiters-depth-1-face)) 12951 12962 (face tree-sitter-hl-face:variable) 12963 12964 (face tree-sitter-hl-face:operator) 12965 12984 (face tree-sitter-hl-face:string) 12991 12992 (face (rainbow-delimiters-depth-1-face)) 12992 13005 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 13005 13006 (face (rainbow-delimiters-depth-1-face)) 13007 13008 (face tree-sitter-hl-face:operator) 13011 13012 (face (rainbow-delimiters-depth-1-face)) 13012 13018 (face tree-sitter-hl-face:string) 13018 13019 (face (rainbow-delimiters-depth-1-face)) 13020 13025 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 13025 13026 (face (rainbow-delimiters-depth-1-face)) 13026 13032 (face tree-sitter-hl-face:keyword) 13033 13034 (face tree-sitter-hl-face:variable.parameter) 13045 13053 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 13053 13054 (face (rainbow-delimiters-depth-2-face)) 13068 13069 (face (rainbow-delimiters-depth-2-face)) 13070 13074 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 13074 13075 (face (rainbow-delimiters-depth-2-face)) 13075 13076 (face (rainbow-delimiters-depth-2-face)) 13076 13077 (face (rainbow-delimiters-depth-1-face)) 13082 13091 (face tree-sitter-hl-face:variable) 13092 13093 (face tree-sitter-hl-face:operator) 13096 13097 (face (rainbow-delimiters-depth-1-face)) 13097 13110 (face tree-sitter-hl-face:string) 13110 13111 (face (rainbow-delimiters-depth-1-face)) 13112 13116 (face tree-sitter-hl-face:property) 13116 13117 (face (rainbow-delimiters-depth-1-face)) 13117 13118 (face tree-sitter-hl-face:operator) 13118 13119 (face tree-sitter-hl-face:number) 13119 13120 (face (rainbow-delimiters-depth-1-face)) 13131 13139 (face tree-sitter-hl-face:variable) 13140 13141 (face tree-sitter-hl-face:operator) 13142 13157 (face tree-sitter-hl-face:string) 13158 13159 (face tree-sitter-hl-face:operator) 13160 13163 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 13163 13164 (face (rainbow-delimiters-depth-1-face)) 13173 13174 (face (rainbow-delimiters-depth-1-face)) 13175 13176 (face tree-sitter-hl-face:operator) 13177 13183 (face tree-sitter-hl-face:string) 13188 13197 (face tree-sitter-hl-face:variable) 13198 13199 (face tree-sitter-hl-face:operator) 13203 13207 (face tree-sitter-hl-face:property) 13208 13212 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 13212 13213 (face (rainbow-delimiters-depth-1-face)) 13222 13237 (face tree-sitter-hl-face:property) 13247 13248 (face (rainbow-delimiters-depth-1-face)) 13254 13273 (face tree-sitter-hl-face:function.call) 13273 13274 (face (rainbow-delimiters-depth-1-face)) 13309 13314 (face tree-sitter-hl-face:property) 13314 13315 (face (rainbow-delimiters-depth-1-face)) 13317 13323 (face tree-sitter-hl-face:comment) 13324 13326 (face tree-sitter-hl-face:keyword) 13327 13335 (face tree-sitter-hl-face:constant.builtin) 13336 13338 (face tree-sitter-hl-face:operator) 13339 13349 (face tree-sitter-hl-face:string) 13355 13359 (face tree-sitter-hl-face:function.call) 13359 13360 (face (rainbow-delimiters-depth-1-face)) 13360 13361 (face (rainbow-delimiters-depth-1-face))) . 1) (undo-tree-id2 . -34) (undo-tree-id3 . -71) (undo-tree-id4 . -71) (undo-tree-id5 . -71) (undo-tree-id6 . -71) (undo-tree-id7 . -71) (undo-tree-id8 . -71) (undo-tree-id9 . -71) (undo-tree-id10 . -71) (undo-tree-id11 . -71) (undo-tree-id12 . -71) (undo-tree-id13 . -71) (undo-tree-id14 . -71) (undo-tree-id15 . -71) (undo-tree-id16 . -71) (undo-tree-id17 . -71) (undo-tree-id18 . -71) (undo-tree-id19 . -71) (undo-tree-id20 . -71) (undo-tree-id21 . -71) (undo-tree-id22 . -71) (undo-tree-id23 . -71) (undo-tree-id24 . -71) (undo-tree-id25 . -71) (undo-tree-id26 . -71) (undo-tree-id27 . -11919) (undo-tree-id28 . -11919) (undo-tree-id29 . -11601) (undo-tree-id30 . -33) (undo-tree-id31 . -71) (undo-tree-id32 . -661) (undo-tree-id33 . -661) (undo-tree-id34 . -241) (undo-tree-id35 . -219) (undo-tree-id36 . -241) (undo-tree-id37 . -661) (undo-tree-id38 . -241) (undo-tree-id39 . -241) (undo-tree-id40 . -241) (undo-tree-id41 . -241) (undo-tree-id42 . -241) (undo-tree-id43 . -241) (undo-tree-id44 . -241) (undo-tree-id45 . -241) (undo-tree-id46 . -241) (undo-tree-id47 . -241) (undo-tree-id48 . -241) (undo-tree-id49 . -241) (undo-tree-id50 . -241) (undo-tree-id51 . -241) (undo-tree-id52 . -241) (undo-tree-id53 . -241) (undo-tree-id54 . -241) (undo-tree-id55 . -241) (undo-tree-id56 . -241) (undo-tree-id57 . -241) (undo-tree-id58 . -241) (undo-tree-id59 . -241) (undo-tree-id60 . -241) (undo-tree-id61 . -241) (undo-tree-id62 . -241) (undo-tree-id63 . -241) (undo-tree-id64 . -241) (t 26292 37108 947756 548000)) nil (26292 37127 245856 302000) 0 nil])
([nil nil ((34 . 36) (t 26292 37127 262553 398000)) nil (26292 37176 580481 896000) 0 nil])
([nil nil ((36 . 44)) nil (26292 37176 580480 913000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -43) (undo-tree-id102 . -1) 44) nil (26292 37176 580479 975000) 0 nil])
([nil nil ((43 . 45)) nil (26292 37176 580478 255000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -44) (undo-tree-id101 . -1) 45) nil (26292 37176 580476 983000) 0 nil])
([nil nil ((44 . 47)) nil (26292 37176 580474 843000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg chg fontified t)) . -44) (undo-tree-id100 . -1) 45) nil (26292 37176 580472 972000) 0 nil])
([nil nil ((46 . 49)) nil (26292 37176 580470 775000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t)) . -48) (undo-tree-id99 . -1) 49) nil (26292 37176 580469 954000) 0 nil])
([nil nil ((48 . 49)) nil (26292 37246 580910 191000) 0 nil])
([nil nil ((#("from academy_reports import settings
from academy_reports import arg
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 21 (fontified t) 21 27 (face tree-sitter-hl-face:keyword fontified t) 27 37 (fontified t) 37 41 (face tree-sitter-hl-face:keyword fontified t) 41 58 (fontified t) 58 64 (face tree-sitter-hl-face:keyword fontified t) 64 69 (fontified t)) . 50)) ((50 . 119)) (26292 37250 912023 535000) 0 nil] [nil nil ((#("from academy_reports import settings
from academy_reports import arg
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 21 (fontified t) 21 27 (face tree-sitter-hl-face:keyword fontified t) 27 37 (fontified t) 37 41 (face tree-sitter-hl-face:keyword fontified t) 41 58 (fontified t) 58 64 (face tree-sitter-hl-face:keyword fontified t) 64 69 (fontified t)) . -50) (undo-tree-id65 . -37) (undo-tree-id66 . -36) (undo-tree-id67 . -36) (undo-tree-id68 . -36) (undo-tree-id69 . -36) (undo-tree-id70 . -36) (undo-tree-id71 . -36) (undo-tree-id72 . -36) (undo-tree-id73 . -36) (undo-tree-id74 . -36) (undo-tree-id75 . -36) (undo-tree-id76 . -37) (undo-tree-id77 . -37) (undo-tree-id78 . -37) (undo-tree-id79 . -37) (undo-tree-id80 . -37) (undo-tree-id81 . -37) (undo-tree-id82 . -37) (undo-tree-id83 . -37) (undo-tree-id84 . -37) (undo-tree-id85 . -69) (undo-tree-id86 . -69) (undo-tree-id87 . -37) (undo-tree-id88 . -69) (undo-tree-id89 . -69) (undo-tree-id90 . -69) (undo-tree-id91 . -69) (undo-tree-id92 . -69) (undo-tree-id93 . -69) (undo-tree-id94 . -69) (undo-tree-id95 . -69) (undo-tree-id96 . -69) (undo-tree-id97 . -69) (undo-tree-id98 . -69) 119) ((nil ws-butler-chg delete 119 . 120) (50 . 119)) (26292 37176 580462 560000) 0 nil])
([nil nil ((#("from academy_reports import utils, settings, arg
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 21 (fontified t) 21 27 (face tree-sitter-hl-face:keyword fontified t) 27 33 (fontified t) 33 43 (ws-butler-chg chg fontified t) 43 44 (ws-butler-chg delete fontified t) 44 48 (ws-butler-chg chg fontified t) 48 49 (ws-butler-chg delete fontified t)) . 1) (undo-tree-id128 . -49) (undo-tree-id129 . -49) (undo-tree-id130 . -49) (undo-tree-id131 . -49) (undo-tree-id132 . -49) (undo-tree-id133 . -49) (undo-tree-id134 . -49) (undo-tree-id135 . -49) (undo-tree-id136 . -49) (undo-tree-id137 . -49) (undo-tree-id138 . -49) (undo-tree-id139 . -49) (undo-tree-id140 . -49) (undo-tree-id141 . -49) (undo-tree-id142 . -49) (undo-tree-id143 . -49) (undo-tree-id144 . -49) (undo-tree-id145 . -49) (undo-tree-id146 . -49) (undo-tree-id147 . -49) (undo-tree-id148 . -49) (undo-tree-id149 . -49) (undo-tree-id150 . -49) (undo-tree-id151 . -49) (undo-tree-id152 . -49) (undo-tree-id153 . -49) (undo-tree-id154 . -49) (undo-tree-id155 . -49) (undo-tree-id156 . -49) (undo-tree-id157 . -49) (undo-tree-id158 . -49) (undo-tree-id159 . -49) (undo-tree-id160 . -49) (undo-tree-id161 . -49) (undo-tree-id162 . -49) (undo-tree-id163 . -49) (undo-tree-id164 . -49) (undo-tree-id165 . -49) (undo-tree-id166 . -49) (undo-tree-id167 . -49) (undo-tree-id168 . -49) (undo-tree-id169 . -49) (undo-tree-id170 . -49) (undo-tree-id171 . -49) (undo-tree-id172 . -49) (undo-tree-id173 . -49) (undo-tree-id174 . -49) (undo-tree-id175 . -49) (undo-tree-id176 . -49) (undo-tree-id177 . -49) (undo-tree-id178 . -49) (undo-tree-id179 . -49) (undo-tree-id180 . -49) (undo-tree-id181 . -49) (undo-tree-id182 . -49) (undo-tree-id183 . -49) (undo-tree-id184 . -49) (undo-tree-id185 . -49) (undo-tree-id186 . -49) (undo-tree-id187 . -49) (undo-tree-id188 . -49) (undo-tree-id189 . -49) (undo-tree-id190 . -49) (undo-tree-id191 . -49) (undo-tree-id192 . -49) (undo-tree-id193 . -49) (undo-tree-id194 . -49) (undo-tree-id195 . -49) (undo-tree-id196 . -49) (undo-tree-id197 . -49) (undo-tree-id198 . -49) (undo-tree-id199 . -49) (undo-tree-id200 . -49) (undo-tree-id201 . -49) (undo-tree-id202 . -49) (undo-tree-id203 . -49) (undo-tree-id204 . -49) (undo-tree-id205 . -49) (undo-tree-id206 . -49) (undo-tree-id207 . -49) (undo-tree-id208 . -49) (undo-tree-id209 . -49)) ((1 . 50)) (26292 37251 254160 432000) 0 nil])
nil
([nil nil ((72 . 73)) ((#("
" 0 1 (fontified t)) . 72) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1)) (26292 37251 748742 551000) 0 nil])
([nil nil ((nil rear-nonsticky nil 121 . 122) (73 . 122)) ((#("from academy_reports import utils, settings, arg
" 0 4 (face tree-sitter-hl-face:keyword fontified nil) 4 21 (fontified nil) 21 27 (face tree-sitter-hl-face:keyword fontified nil) 27 33 (fontified nil) 33 43 (fontified nil) 43 44 (fontified nil) 44 48 (fontified nil) 48 49 (fontified nil rear-nonsticky nil)) . 73) (nil rear-nonsticky t 121 . 122)) (26292 37252 498392 825000) 0 nil])
([nil nil ((#("import warnings
import traceback
from matplotlib.backends.backend_pdf import PdfPages

warnings.filterwarnings(\"ignore\")
" 0 6 (face tree-sitter-hl-face:keyword fontified t) 6 16 (fontified t) 16 22 (face tree-sitter-hl-face:keyword fontified t) 22 33 (fontified t) 33 37 (face tree-sitter-hl-face:keyword fontified t) 37 70 (fontified t) 70 76 (face tree-sitter-hl-face:keyword fontified t) 76 77 (fontified t) 77 85 (face tree-sitter-hl-face:constructor fontified t) 85 96 (fontified t) 96 110 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 110 111 (face (rainbow-delimiters-depth-1-face) fontified t) 111 119 (face tree-sitter-hl-face:string fontified t) 119 120 (face (rainbow-delimiters-depth-1-face) fontified t) 120 121 (fontified t)) . 488) (nil ws-butler-chg nil 609 . 610)) ((nil ws-butler-chg delete 609 . 610) (488 . 609)) (26292 37252 730485 654000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 488)) ((488 . 489)) (26292 37253 400671 574000) 0 nil])
([nil nil ((nil rear-nonsticky nil 192 . 193) (nil fontified nil 158 . 159) (72 . 193)) ((#("import warnings
import traceback
from matplotlib.backends.backend_pdf import PdfPages

warnings.filterwarnings(\"ignore\")
" 0 6 (face tree-sitter-hl-face:keyword fontified nil ws-butler-chg chg) 6 16 (fontified nil ws-butler-chg chg) 16 22 (face tree-sitter-hl-face:keyword fontified nil ws-butler-chg chg) 22 33 (fontified nil ws-butler-chg chg) 33 34 (face tree-sitter-hl-face:keyword fontified nil) 34 37 (face tree-sitter-hl-face:keyword fontified nil) 37 70 (fontified nil) 70 76 (face tree-sitter-hl-face:keyword fontified nil) 76 77 (fontified nil) 77 85 (face tree-sitter-hl-face:constructor fontified nil) 85 86 (fontified nil) 86 87 (fontified nil) 87 96 (fontified nil) 96 110 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified nil) 110 111 (face (rainbow-delimiters-depth-1-face) fontified nil) 111 119 (face tree-sitter-hl-face:string fontified nil) 119 120 (face (rainbow-delimiters-depth-1-face) fontified nil) 120 121 (fontified nil rear-nonsticky nil)) . 72) (nil fontified t 158 . 159) (nil rear-nonsticky t 192 . 193)) (26292 37253 727371 980000) 0 nil])
([nil nil ((#("import warnings
import traceback
" 0 6 (face tree-sitter-hl-face:keyword fontified t ws-butler-chg chg) 6 16 (fontified t ws-butler-chg chg) 16 22 (face tree-sitter-hl-face:keyword fontified t ws-butler-chg chg) 22 33 (fontified t ws-butler-chg chg)) . 72)) ((72 . 105)) (26292 37254 293450 519000) 0 nil])
([nil nil ((nil rear-nonsticky nil 63 . 64) (nil fontified nil 37 . 47) (31 . 64)) ((#("import warnings
import traceback
" 0 6 (face tree-sitter-hl-face:keyword fontified nil) 6 16 (fontified nil) 16 22 (face tree-sitter-hl-face:keyword fontified nil) 22 32 (fontified nil) 32 33 (rear-nonsticky nil fontified nil)) . 31) (nil fontified t 37 . 47) (nil rear-nonsticky t 63 . 64) (t 26292 37211 623623 547000)) (26292 37254 781071 926000) 0 nil])
([nil nil ((#("warnings.filterwarnings(\"ignore\")
" 0 9 (fontified t) 9 23 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 32 (face tree-sitter-hl-face:string fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t rear-nonsticky t)) . 159) (undo-tree-id213 . -34) 193 (t 26292 37211 623623 547000)) nil (26292 37269 38121 897000) 0 nil])
([nil nil ((nil fontified nil 80 . 81) (nil fontified nil 79 . 80) (nil fontified nil 71 . 79) (nil fontified nil 70 . 71) (nil fontified nil 56 . 70) (nil fontified nil 47 . 56) (47 . 81)) nil (26292 37269 38119 554000) 0 nil])
([nil nil ((#("import warnings
warnings.filterwarnings(\"ignore\")
" 0 6 (face tree-sitter-hl-face:keyword fontified t) 6 16 (fontified t) 16 25 (fontified t ws-butler-chg chg) 25 39 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t ws-butler-chg chg) 39 40 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg) 40 48 (face tree-sitter-hl-face:string fontified t ws-butler-chg chg) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg) 49 50 (fontified t ws-butler-chg chg rear-nonsticky t)) . 31) (undo-tree-id211 . -16) (undo-tree-id212 . -50) 81) nil (26292 37269 38118 50000) 0 nil])
([nil nil ((nil fontified nil 50 . 51) (nil fontified nil 49 . 50) (nil fontified nil 41 . 49) (nil fontified nil 40 . 41) (nil fontified nil 26 . 40) (nil fontified nil 17 . 26) (nil fontified nil 7 . 17) (nil fontified nil 1 . 7) (1 . 51)) nil (26292 37269 38114 409000) 0 nil])
([nil nil ((51 . 52)) nil (26292 37269 38112 674000) 0 nil])
([nil nil ((99 . 100)) nil (26292 37269 38111 784000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 194) (undo-tree-id210 . -1)) nil (26292 37269 38107 812000) 0 nil])
([nil nil ((#("timedelta" 0 9 (fontified t)) . 121) (undo-tree-id214 . -9) (t 26292 37269 51454 751000)) nil (26292 37301 200889 482000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 121) (#("," 0 1 (ws-butler-chg delete fontified t)) . 121)) nil (26292 37301 200873 336000) 0 nil])
([nil nil ((599 . 600) (599 . 600) (t 26292 37301 215293 16000)) nil (26292 37433 871482 523000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 599) (#("
" 0 1 (ws-butler-chg chg fontified t)) . 599)) nil (26292 37433 871481 7000) 0 nil])
([nil nil ((599 . 600)) nil (26292 37433 871479 712000) 0 nil])
([nil nil ((600 . 604)) nil (26292 37433 871478 212000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg chg fontified t)) . -600) (undo-tree-id236 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -601) (undo-tree-id237 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword ws-butler-chg chg fontified t)) . -602) (undo-tree-id238 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -603) (undo-tree-id239 . -1) 604) nil (26292 37433 871475 849000) 0 nil])
([nil nil ((600 . 605)) nil (26292 37433 871468 351000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t)) . -600) (undo-tree-id231 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t)) . -601) (undo-tree-id232 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -602) (undo-tree-id233 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -603) (undo-tree-id234 . -1) (#("s" 0 1 (face tree-sitter-hl-face:keyword ws-butler-chg chg fontified t)) . -604) (undo-tree-id235 . -1) 605) nil (26292 37433 871466 592000) 0 nil])
([nil nil ((599 . 614)) nil (26292 37433 871459 392000) 0 nil])
([nil nil ((626 . 627) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 626) (625 . 626) (624 . 626) (#("(" 0 1 (face tree-sitter-hl-face:function ws-butler-chg chg fontified nil)) . -624) (614 . 625)) nil (26292 37433 871458 415000) 0 nil])
([nil nil ((628 . 632)) nil (26292 37433 871457 120000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 639) (638 . 639) (637 . 639) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -637) (632 . 638)) nil (26292 37433 871455 422000) 0 nil])
([nil nil ((#("\"" 0 1 (syntax-table (15) face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . 640) (639 . 640) (638 . 640) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -638) (638 . 639)) nil (26292 37433 871451 940000) 0 nil])
([nil nil ((639 . 640)) nil (26292 37433 871450 580000) 0 nil])
([nil nil ((#("F" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -639) (undo-tree-id230 . -1) 640) nil (26292 37433 871449 417000) 0 nil])
([nil nil ((639 . 653)) nil (26292 37433 871444 915000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -652) (undo-tree-id229 . -1) 653) nil (26292 37433 871442 841000) 0 nil])
([nil nil ((652 . 662)) nil (26292 37433 871438 96000) 0 nil])
([nil nil ((664 . 669)) nil (26292 37433 871436 465000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1240 . 1241) (nil fontified nil 1240 . 1241) (nil fontified nil 1239 . 1240) (nil fontified nil 1214 . 1239) (nil fontified nil 1213 . 1214) (nil fontified nil 1209 . 1213) (nil fontified nil 1208 . 1209) (nil fontified nil 1204 . 1208) (nil fontified nil 1200 . 1204) (nil fontified nil 1199 . 1200) (nil fontified nil 1198 . 1199) (nil fontified nil 1189 . 1198) (nil fontified nil 1180 . 1189) (nil fontified nil 1174 . 1180) (nil fontified nil 1173 . 1174) (nil fontified nil 1172 . 1173) (nil fontified nil 1161 . 1172) (nil fontified nil 1160 . 1161) (nil fontified nil 1159 . 1160) (nil fontified nil 1150 . 1159) (nil fontified nil 1140 . 1150) (nil fontified nil 1139 . 1140) (nil fontified nil 1125 . 1139) (nil fontified nil 1124 . 1125) (nil fontified nil 1116 . 1124) (nil fontified nil 1099 . 1116) (nil fontified nil 1098 . 1099) (nil fontified nil 1084 . 1098) (nil fontified nil 1083 . 1084) (nil fontified nil 1077 . 1083) (nil fontified nil 1076 . 1077) (nil fontified nil 1072 . 1076) (nil fontified nil 1068 . 1072) (nil fontified nil 1065 . 1068) (nil fontified nil 1064 . 1065) (nil fontified nil 1062 . 1064) (nil fontified nil 1052 . 1062) (nil fontified nil 1051 . 1052) (nil fontified nil 1042 . 1051) (nil fontified nil 1021 . 1042) (nil fontified nil 1012 . 1021) (nil fontified nil 1011 . 1012) (nil fontified nil 1007 . 1011) (nil fontified nil 1006 . 1007) (nil fontified nil 1002 . 1006) (nil fontified nil 998 . 1002) (nil fontified nil 997 . 998) (nil fontified nil 996 . 997) (nil fontified nil 982 . 996) (nil fontified nil 972 . 982) (nil fontified nil 971 . 972) (nil fontified nil 956 . 971) (nil fontified nil 955 . 956) (nil fontified nil 947 . 955) (nil fontified nil 946 . 947) (nil fontified nil 945 . 946) (nil fontified nil 944 . 945) (nil fontified nil 943 . 944) (nil fontified nil 942 . 943) (nil fontified nil 938 . 942) (nil fontified nil 937 . 938) (nil fontified nil 926 . 937) (nil fontified nil 923 . 926) (nil fontified nil 922 . 923) (nil fontified nil 909 . 922) (nil fontified nil 899 . 909) (nil fontified nil 898 . 899) (nil fontified nil 897 . 898) (nil fontified nil 893 . 897) (nil fontified nil 884 . 893) (nil fontified nil 883 . 884) (nil fontified nil 882 . 883) (nil fontified nil 881 . 882) (nil fontified nil 877 . 881) (nil fontified nil 876 . 877) (nil fontified nil 872 . 876) (nil fontified nil 868 . 872) (nil fontified nil 867 . 868) (nil fontified nil 866 . 867) (nil fontified nil 862 . 866) (nil fontified nil 853 . 862) (nil fontified nil 852 . 853) (nil fontified nil 851 . 852) (nil fontified nil 850 . 851) (nil fontified nil 846 . 850) (nil fontified nil 845 . 846) (nil fontified nil 838 . 845) (nil fontified nil 834 . 838) (nil fontified nil 833 . 834) (nil fontified nil 832 . 833) (nil fontified nil 825 . 832) (nil fontified nil 815 . 825) (nil fontified nil 814 . 815) (nil fontified nil 811 . 814) (nil fontified nil 810 . 811) (nil fontified nil 807 . 810) (nil fontified nil 801 . 807) (nil fontified nil 800 . 801) (nil fontified nil 792 . 800) (nil fontified nil 788 . 792) (nil fontified nil 787 . 788) (nil fontified nil 786 . 787) (nil fontified nil 784 . 786) (nil fontified nil 774 . 784) (nil fontified nil 773 . 774) (nil fontified nil 772 . 773) (nil fontified nil 771 . 772) (nil fontified nil 770 . 771) (nil fontified nil 767 . 770) (nil fontified nil 766 . 767) (nil fontified nil 761 . 766) (nil fontified nil 750 . 761) (nil fontified nil 749 . 750) (nil fontified nil 748 . 749) (nil fontified nil 739 . 748) (nil fontified nil 730 . 739) (nil fontified nil 729 . 730) (nil fontified nil 725 . 729) (nil fontified nil 724 . 725) (nil fontified nil 716 . 724) (nil fontified nil 715 . 716) (nil fontified nil 711 . 715) (nil fontified nil 707 . 711) (nil fontified nil 706 . 707) (nil fontified nil 705 . 706) (nil fontified nil 696 . 705) (nil fontified nil 687 . 696) (nil fontified nil 686 . 687) (nil fontified nil 685 . 686) (nil fontified nil 684 . 685) (nil fontified nil 680 . 684) (nil fontified nil 675 . 680) (nil fontified nil 674 . 675) (nil fontified nil 673 . 674) (nil fontified nil 669 . 673) (nil fontified nil 665 . 669) (665 . 1241)) nil (26292 37433 871430 985000) 0 nil])
([nil nil ((1241 . 1242)) nil (26292 37433 871413 963000) 0 nil])
([nil nil ((#("<" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t)) . -1241) (undo-tree-id228 . -1) 1242) nil (26292 37433 871413 74000) 0 nil])
([nil nil ((#("    " 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t)) . -1197) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1145) (1141 . 1145) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1110) (1106 . 1110) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1077) (1069 . 1077) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1030) (1026 . 1030) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -954) (950 . 954) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -869) (865 . 869) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -842) (838 . 842) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -809) (805 . 809) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -772) (768 . 772) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -731) (727 . 731) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -692) (688 . 692)) nil (26292 37433 871409 328000) 0 nil])
([nil nil ((687 . 692)) nil (26292 37433 871404 150000) 0 nil])
([nil nil ((664 . 669)) nil (26292 37433 871402 590000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 689) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 665) 692) nil (26292 37433 871396 556000) 0 nil])
([nil nil ((1199 . 1204) (t 26292 37433 886992 333000)) nil (26292 37522 737832 775000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1259 . 1260) (nil fontified nil 1259 . 1260) (nil fontified nil 1258 . 1259) (nil fontified nil 1252 . 1258) (nil fontified nil 1218 . 1252) (nil fontified nil 1217 . 1218) (nil fontified nil 1214 . 1217) (nil fontified nil 1213 . 1214) (nil fontified nil 1208 . 1213) (nil fontified nil 1200 . 1208) (1200 . 1260)) nil (26292 37522 737831 434000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -1204) 1200) nil (26292 37522 737828 805000) 0 nil])
([nil nil ((1199 . 1204)) nil (26292 37522 737827 804000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1434 . 1435) (nil fontified nil 1434 . 1435) (nil fontified nil 1433 . 1434) (nil fontified nil 1427 . 1433) (nil fontified nil 1420 . 1427) (nil fontified nil 1412 . 1420) (nil fontified nil 1400 . 1412) (nil fontified nil 1386 . 1400) (nil fontified nil 1385 . 1386) (nil fontified nil 1380 . 1385) (nil fontified nil 1366 . 1380) (nil fontified nil 1365 . 1366) (nil fontified nil 1362 . 1365) (nil fontified nil 1358 . 1362) (nil fontified nil 1353 . 1358) (nil fontified nil 1352 . 1353) (nil fontified nil 1333 . 1352) (nil fontified nil 1332 . 1333) (nil fontified nil 1321 . 1332) (nil fontified nil 1320 . 1321) (nil fontified nil 1315 . 1320) (nil fontified nil 1310 . 1315) (nil fontified nil 1301 . 1310) (nil fontified nil 1295 . 1301) (nil fontified nil 1294 . 1295) (nil fontified nil 1292 . 1294) (nil fontified nil 1286 . 1292) (nil fontified nil 1282 . 1286) (nil fontified nil 1273 . 1282) (nil fontified nil 1272 . 1273) (nil fontified nil 1270 . 1272) (nil fontified nil 1253 . 1270) (nil fontified nil 1252 . 1253) (nil fontified nil 1241 . 1252) (nil fontified nil 1237 . 1241) (nil fontified nil 1223 . 1237) (nil fontified nil 1219 . 1223) (nil fontified nil 1218 . 1219) (nil fontified nil 1216 . 1218) (nil fontified nil 1210 . 1216) (nil fontified nil 1208 . 1210) (nil fontified nil 1207 . 1208) (nil fontified nil 1200 . 1207) (1200 . 1435)) nil (26292 37522 737826 6000) 0 nil])
([nil nil ((1435 . 1436)) nil (26292 37522 737819 497000) 0 nil])
([nil nil ((#("<" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t)) . -1435) (undo-tree-id240 . -1) 1436) nil (26292 37522 737818 495000) 0 nil])
([nil nil ((#("    " 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t)) . -1411) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1356) (1348 . 1356) (#("        " 0 4 (fontified nil ws-butler-chg chg) 4 8 (fontified nil ws-butler-chg chg)) . -1342) (1338 . 1342) (#("            " 0 7 (fontified nil ws-butler-chg chg) 7 12 (fontified nil ws-butler-chg chg)) . -1299) (1291 . 1299) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1270) (1266 . 1270) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1229) (1221 . 1229) (#("        " 0 7 (fontified nil ws-butler-chg chg) 7 8 (fontified nil ws-butler-chg chg)) . -1204) (1200 . 1204)) nil (26292 37522 737808 986000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 1468) 1219) nil (26292 37522 737802 411000) 0 nil])
([nil nil ((689 . 693) (t 26292 37522 751931 771000)) nil (26292 37602 264375 163000) 0 nil])
([nil nil ((810 . 814)) nil (26292 37602 264374 271000) 0 nil])
([nil nil ((959 . 963)) nil (26292 37602 264373 325000) 0 nil])
([nil nil ((1119 . 1127)) nil (26292 37602 264372 564000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . -1123) (undo-tree-id276 . -4) 1127) nil (26292 37602 264371 656000) 0 nil])
([nil nil ((633 . 634) (#(")" 0 1 (ws-butler-chg delete face (rainbow-delimiters-depth-1-face) fontified nil)) . 633) (632 . 633) (#(")" 0 1 (face tree-sitter-hl-face:variable.parameter ws-butler-chg chg fontified nil)) . -632) (625 . 633)) nil (26292 37602 264369 502000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified t)) . -632) (undo-tree-id274 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t)) . -633) (undo-tree-id275 . -1) 634) nil (26292 37602 264367 697000) 0 nil])
([nil nil ((632 . 635)) nil (26292 37602 264365 398000) 0 nil])
([nil nil ((#(")" 0 1 (ws-butler-chg chg fontified nil)) . 709) (708 . 709) (707 . 709) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -707) (702 . 708)) nil (26292 37602 264364 303000) 0 nil])
([nil nil ((708 . 712)) nil (26292 37602 264362 901000) 0 nil])
([nil nil ((697 . 702)) nil (26292 37602 264362 268000) 0 nil])
([nil nil ((702 . 704)) nil (26292 37602 264361 150000) 0 nil])
([nil nil ((704 . 713)) nil (26292 37602 264360 663000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -712) (undo-tree-id273 . -1) 713) nil (26292 37602 264359 839000) 0 nil])
([nil nil ((712 . 713)) nil (26292 37602 264357 927000) 0 nil])
([nil nil ((714 . 722) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 714)) nil (26292 37602 264356 829000) 0 nil])
([nil nil ((733 . 742)) nil (26292 37602 264355 874000) 0 nil])
([nil nil ((nil rear-nonsticky nil 857 . 858) (nil fontified nil 857 . 858) (nil fontified nil 856 . 857) (nil fontified nil 852 . 856) (nil fontified nil 851 . 852) (nil fontified nil 847 . 851) (nil fontified nil 846 . 847) (nil fontified nil 838 . 846) (nil fontified nil 837 . 838) (nil fontified nil 829 . 837) (nil fontified nil 828 . 829) (nil fontified nil 826 . 828) (nil fontified nil 822 . 826) (822 . 858)) nil (26292 37602 264354 899000) 0 nil])
([nil nil ((#("ath" 0 3 (fontified t ws-butler-chg chg)) . 853)) nil (26292 37602 264352 283000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t ws-butler-chg chg)) . -852) (undo-tree-id272 . -1) 853) nil (26292 37602 264351 126000) 0 nil])
([nil nil ((852 . 860)) nil (26292 37602 264349 303000) 0 nil])
([nil nil ((852 . 862)) nil (26292 37602 264348 558000) 0 nil])
([nil nil ((859 . 860)) nil (26292 37602 264347 809000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t ws-butler-chg chg)) . -859) (undo-tree-id271 . -1) 860) nil (26292 37602 264346 540000) 0 nil])
([nil nil ((860 . 861)) nil (26292 37602 264345 13000) 0 nil])
([nil nil ((852 . 854) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil ws-butler-chg chg)) . -852) (852 . 853)) nil (26292 37602 264343 857000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . 853)) nil (26292 37602 264342 584000) 0 nil])
([nil nil ((728 . 730) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -728) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (728 . 729)) nil (26292 37602 264341 585000) 0 nil])
([nil nil ((728 . 729)) nil (26292 37602 264336 458000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg chg fontified t)) . -728) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) 729) nil (26292 37602 264332 224000) 0 nil])
([nil nil ((729 . 733)) nil (26292 37602 264297 171000) 0 nil])
([nil nil ((734 . 735)) nil (26292 37602 264296 120000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg chg fontified t)) . -734) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) 735) nil (26292 37602 264294 15000) 0 nil])
([nil nil ((734 . 736)) nil (26292 37602 264234 445000) 0 nil])
([nil nil ((876 . 877)) nil (26292 37602 264232 691000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1213) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 1057) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 912) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 742) 919) nil (26292 37602 264226 365000) 0 nil])
([nil nil ((1057 . 1061) (t 26292 37602 275311 655000)) nil (26292 37637 605594 354000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1072 . 1073) (nil fontified nil 1072 . 1073) (nil fontified nil 1064 . 1072) (nil fontified nil 1063 . 1064) (nil fontified nil 1061 . 1063) (nil fontified nil 1057 . 1061) (1057 . 1073)) nil (26292 37637 605591 842000) 0 nil])
([nil nil ((1073 . 1081) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 1073)) nil (26292 37637 605588 954000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 1088) (1087 . 1088) (1086 . 1088) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -1086) (1081 . 1087)) nil (26292 37637 605587 210000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . 1089) (1088 . 1089) (1087 . 1089) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -1087) (1087 . 1088)) nil (26292 37637 605584 885000) 0 nil])
([nil nil ((1088 . 1096)) nil (26292 37637 605582 845000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -1093) (undo-tree-id472 . -1) (#("c" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -1094) (undo-tree-id473 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -1095) (undo-tree-id474 . -1) 1096) nil (26292 37637 605580 958000) 0 nil])
([nil nil ((1093 . 1095)) nil (26292 37637 605575 929000) 0 nil])
([nil nil ((1096 . 1098)) nil (26292 37637 605574 411000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg chg fontified t)) . -1096) (undo-tree-id470 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -1097) (undo-tree-id471 . -1) 1098) nil (26292 37637 605573 197000) 0 nil])
([nil nil ((1096 . 1098)) nil (26292 37637 605567 735000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . 1109) (1108 . 1109) (1107 . 1109) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -1107) (1098 . 1108)) nil (26292 37637 605565 855000) 0 nil])
([nil nil ((1108 . 1112)) nil (26292 37637 605563 149000) 0 nil])
([nil nil ((1113 . 1123)) nil (26292 37637 605561 514000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t)) . -1121) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -1122) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 1123) nil (26292 37637 605552 632000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . 1123) (1122 . 1123) (1121 . 1123) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -1121) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (1121 . 1122)) nil (26292 37637 605454 207000) 0 nil])
([nil nil ((1122 . 1126)) nil (26292 37637 605449 716000) 0 nil])
([nil nil ((1127 . 1133)) nil (26292 37637 605448 904000) 0 nil])
([nil nil ((1134 . 1143)) nil (26292 37637 605447 960000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . -1139) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) 1143) nil (26292 37637 605444 323000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1135) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) 1139) nil (26292 37637 605374 204000) 0 nil])
([nil nil ((1135 . 1139) 1139 (t 26292 37637 620482 21000)) nil (26292 37652 702943 507000) 0 nil])
([nil nil ((1656 . 1661) (t 26292 37637 620482 21000)) nil (26292 37652 702942 539000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1653) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 1135) 1657) nil (26292 37652 702937 776000) 0 nil])
([nil nil ((1595 . 1603) (t 26292 37652 716996 720000)) nil (26292 37654 968024 555000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . -1599) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) 1603) nil (26292 37654 968022 742000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1595) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) 1599) nil (26292 37654 967996 321000) 0 nil])
([nil nil ((1595 . 1599) 1599 (t 26292 37654 980074 538000)) nil (26292 37680 557343 36000) 0 nil])
([nil nil ((#("        path = arg.file[0]
        file_name = os.path.basename(path)
        file_name = file_name.split(\".\")[0]

        df = pd.read_csv(path, sep=\";\")

        subject = df.subject.iloc[0]
        task = df.task.iloc[0]
        date = datetime.fromtimestamp(df.TRIAL_START.iloc[0]).strftime(\"%Y%m%d-%H%M%S\")

        save_directory = os.path.join(settings.save_directory_manual, subject)

        if not os.path.exists(save_directory):
            os.makedirs(save_directory)

        file_name = file_name + \".pdf\"
        save_path = os.path.join(save_directory, file_name)

        if task == \"S3\":
            daily_report_S3(df, save_path, date)
        elif task == \"S4_1\":
            daily_report_S4_5(df, save_path, date)
        else:
            print(\"Task not found for file:\", path, \"task:\", task)

        print(\"succesfully manual report for file: \", path)
" 0 8 (fontified t) 8 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 14 (face tree-sitter-hl-face:operator fontified t) 14 19 (fontified t) 19 23 (face tree-sitter-hl-face:property fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face tree-sitter-hl-face:number fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 35 (fontified t) 35 44 (face tree-sitter-hl-face:variable fontified t) 44 45 (fontified t) 45 46 (face tree-sitter-hl-face:operator fontified t) 46 50 (fontified t) 50 54 (face tree-sitter-hl-face:property fontified t) 54 55 (fontified t) 55 63 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 78 (fontified t) 78 87 (face tree-sitter-hl-face:variable fontified t) 87 88 (fontified t) 88 89 (face tree-sitter-hl-face:operator fontified t) 89 100 (fontified t) 100 105 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 105 106 (face (rainbow-delimiters-depth-1-face) fontified t) 106 109 (face tree-sitter-hl-face:string fontified t) 109 110 (face (rainbow-delimiters-depth-1-face) fontified t) 110 111 (face (rainbow-delimiters-depth-1-face) fontified t) 111 112 (face tree-sitter-hl-face:number fontified t) 112 113 (face (rainbow-delimiters-depth-1-face) fontified t) 113 123 (fontified t) 123 125 (face tree-sitter-hl-face:variable fontified t) 125 126 (fontified t) 126 127 (face tree-sitter-hl-face:operator fontified t) 127 131 (fontified t) 131 139 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 139 140 (face (rainbow-delimiters-depth-1-face) fontified t) 140 146 (fontified t) 146 149 (face tree-sitter-hl-face:label fontified t) 149 150 (face tree-sitter-hl-face:operator fontified t) 150 153 (face tree-sitter-hl-face:string fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 164 (fontified t) 164 171 (face tree-sitter-hl-face:variable fontified t) 171 172 (fontified t) 172 173 (face tree-sitter-hl-face:operator fontified t) 173 177 (fontified t) 177 178 (face tree-sitter-hl-face:property fontified t) 178 184 (face tree-sitter-hl-face:property fontified t) 184 185 (fontified t) 185 189 (face tree-sitter-hl-face:property fontified t) 189 190 (face (rainbow-delimiters-depth-1-face) fontified t) 190 191 (face tree-sitter-hl-face:number fontified t) 191 192 (face (rainbow-delimiters-depth-1-face) fontified t) 192 201 (fontified t) 201 205 (face tree-sitter-hl-face:variable fontified t) 205 206 (fontified t) 206 207 (face tree-sitter-hl-face:operator fontified t) 207 211 (fontified t) 211 215 (face tree-sitter-hl-face:property fontified t) 215 216 (fontified t) 216 220 (face tree-sitter-hl-face:property fontified t) 220 221 (face (rainbow-delimiters-depth-1-face) fontified t) 221 222 (face tree-sitter-hl-face:number fontified t) 222 223 (face (rainbow-delimiters-depth-1-face) fontified t) 223 232 (fontified t) 232 236 (face tree-sitter-hl-face:variable fontified t) 236 237 (fontified t) 237 238 (face tree-sitter-hl-face:operator fontified t) 238 248 (fontified t) 248 261 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 261 262 (face (rainbow-delimiters-depth-1-face) fontified t) 262 265 (fontified t) 265 276 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property) fontified t) 276 277 (fontified t) 277 281 (face tree-sitter-hl-face:property fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 283 (face tree-sitter-hl-face:number fontified t) 283 284 (face (rainbow-delimiters-depth-2-face) fontified t) 284 285 (face (rainbow-delimiters-depth-1-face) fontified t) 285 286 (fontified t) 286 291 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 291 293 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 293 294 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 294 295 (face (rainbow-delimiters-depth-1-face) fontified t) 295 310 (face tree-sitter-hl-face:string fontified t) 310 311 (face (rainbow-delimiters-depth-1-face) fontified t) 311 321 (fontified t) 321 335 (face tree-sitter-hl-face:variable fontified t) 335 336 (fontified t) 336 337 (face tree-sitter-hl-face:operator fontified t) 337 341 (fontified t) 341 345 (face tree-sitter-hl-face:property fontified t) 345 346 (fontified t) 346 350 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 350 351 (face (rainbow-delimiters-depth-1-face) fontified t) 351 356 (fontified t) 356 358 (fontified t) 358 360 (fontified t) 360 364 (face tree-sitter-hl-face:property fontified t) 364 372 (face tree-sitter-hl-face:property fontified t) 372 373 (face tree-sitter-hl-face:property fontified t) 373 381 (face tree-sitter-hl-face:property fontified t) 381 390 (fontified t) 390 391 (face (rainbow-delimiters-depth-1-face) fontified t) 391 401 (fontified t) 401 403 (face tree-sitter-hl-face:keyword fontified t) 403 404 (fontified t) 404 407 (face tree-sitter-hl-face:operator fontified t) 407 411 (fontified t) 411 415 (face tree-sitter-hl-face:property fontified t) 415 416 (fontified t) 416 418 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 418 422 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 422 423 (face (rainbow-delimiters-depth-1-face) fontified t) 423 429 (fontified t) 429 431 (fontified t) 431 437 (fontified t) 437 438 (face (rainbow-delimiters-depth-1-face) fontified t) 438 439 (fontified t) 439 447 (fontified t) 447 454 (fontified t) 454 455 (fontified t) 455 463 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 463 464 (face (rainbow-delimiters-depth-1-face) fontified t) 464 467 (fontified t) 467 478 (fontified t) 478 479 (face (rainbow-delimiters-depth-1-face) fontified t) 479 489 (fontified t) 489 498 (face tree-sitter-hl-face:variable fontified t) 498 499 (fontified t) 499 500 (face tree-sitter-hl-face:operator fontified t) 500 502 (fontified t) 502 503 (fontified t) 503 511 (fontified t) 511 512 (face tree-sitter-hl-face:operator fontified t) 512 513 (fontified t) 513 519 (face tree-sitter-hl-face:string fontified t) 519 522 (fontified t) 522 523 (fontified t) 523 528 (fontified t) 528 537 (face tree-sitter-hl-face:variable fontified t) 537 538 (fontified t) 538 539 (face tree-sitter-hl-face:operator fontified t) 539 543 (fontified t) 543 547 (face tree-sitter-hl-face:property fontified t) 547 548 (fontified t) 548 552 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 552 553 (face (rainbow-delimiters-depth-1-face) fontified t) 553 578 (fontified t) 578 579 (face (rainbow-delimiters-depth-1-face) fontified t) 579 584 (fontified t) 584 588 (fontified t) 588 589 (fontified t) 589 591 (face tree-sitter-hl-face:keyword fontified t) 591 597 (fontified t) 597 599 (face tree-sitter-hl-face:operator fontified t) 599 600 (fontified t) 600 604 (face tree-sitter-hl-face:string fontified t) 604 618 (fontified t) 618 622 (face tree-sitter-hl-face:function.call fontified t) 622 633 (face tree-sitter-hl-face:function.call fontified t) 633 634 (face (rainbow-delimiters-depth-1-face) fontified t) 634 651 (fontified t) 651 653 (fontified t) 653 654 (face (rainbow-delimiters-depth-1-face) fontified t) 654 663 (fontified t) 663 667 (face tree-sitter-hl-face:keyword fontified t) 667 673 (fontified t) 673 675 (face tree-sitter-hl-face:operator fontified t) 675 676 (fontified t) 676 682 (face tree-sitter-hl-face:string fontified t) 682 683 (fontified t) 683 684 (fontified t) 684 691 (fontified t) 691 696 (fontified t) 696 701 (face tree-sitter-hl-face:function.call fontified t) 701 702 (face tree-sitter-hl-face:function.call fontified t) 702 713 (face tree-sitter-hl-face:function.call fontified t) 713 714 (face (rainbow-delimiters-depth-1-face) fontified t) 714 716 (fontified t) 716 718 (fontified t) 718 723 (fontified t) 723 725 (fontified t) 725 729 (fontified t) 729 733 (fontified t) 733 734 (face (rainbow-delimiters-depth-1-face) fontified t) 734 739 (fontified t) 739 743 (fontified t) 743 746 (face tree-sitter-hl-face:keyword fontified t) 746 747 (face tree-sitter-hl-face:keyword fontified t) 747 761 (fontified t) 761 766 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 766 767 (face (rainbow-delimiters-depth-1-face) fontified t) 767 781 (face tree-sitter-hl-face:string fontified t) 781 793 (face tree-sitter-hl-face:string fontified t) 793 801 (fontified t) 801 808 (face tree-sitter-hl-face:string fontified t) 808 814 (fontified t) 814 815 (face (rainbow-delimiters-depth-1-face) fontified t) 815 825 (fontified t) 825 830 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 830 831 (face (rainbow-delimiters-depth-1-face) fontified t) 831 834 (face tree-sitter-hl-face:string fontified t) 834 835 (face tree-sitter-hl-face:string fontified t) 835 869 (face tree-sitter-hl-face:string fontified t) 869 875 (fontified t) 875 876 (face (rainbow-delimiters-depth-1-face) fontified t) 876 877 (fontified t)) . -1907) (undo-tree-id644 . -877) (undo-tree-id645 . -684) (undo-tree-id646 . -581) (undo-tree-id647 . -816) (undo-tree-id648 . -877) 2784 (t 26292 37654 980074 538000)) nil (26292 37680 557338 584000) 0 nil])
([nil nil ((1907 . 1915)) nil (26292 37680 557332 29000) 0 nil])
([nil nil ((1915 . 1921)) nil (26292 37680 557331 205000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -1920) (undo-tree-id643 . -1) 1921) nil (26292 37680 557329 402000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 1939) (1938 . 1939) (1937 . 1939) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -1937) (1920 . 1938)) nil (26292 37680 557326 693000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1906) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 1907) nil (26292 37680 557323 18000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 1595) 1986) nil (26292 37680 557244 964000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1994) (undo-tree-id748 . -1) 1995 (t 26292 37680 577965 565000)) nil (26292 37689 40380 679000) 0 nil])
([nil nil ((#("    print(\"\")
    print(\"Generating dailies\")
" 0 4 (fontified t) 4 9 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 12 (face tree-sitter-hl-face:string fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 14 (fontified t) 14 18 (fontified t) 18 23 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 44 (face tree-sitter-hl-face:string fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 46 (fontified t)) . -1774) (undo-tree-id649 . -25) (undo-tree-id650 . -46) (undo-tree-id651 . -46) (undo-tree-id652 . -25) (undo-tree-id653 . -46) (undo-tree-id654 . -46) (undo-tree-id655 . -46) (undo-tree-id656 . -46) (undo-tree-id657 . -46) (undo-tree-id658 . -46) (undo-tree-id659 . -46) (undo-tree-id660 . -46) (undo-tree-id661 . -46) (undo-tree-id662 . -46) (undo-tree-id663 . -46) (undo-tree-id664 . -46) (undo-tree-id665 . -46) (undo-tree-id666 . -46) (undo-tree-id667 . -46) (undo-tree-id668 . -46) (undo-tree-id669 . -25) (undo-tree-id670 . -46) (undo-tree-id671 . -25) (undo-tree-id672 . -25) (undo-tree-id673 . -25) (undo-tree-id674 . -25) (undo-tree-id675 . -25) (undo-tree-id676 . -25) (undo-tree-id677 . -25) (undo-tree-id678 . -25) (undo-tree-id679 . -25) (undo-tree-id680 . -25) (undo-tree-id681 . -25) (undo-tree-id682 . -25) (undo-tree-id683 . -11) (undo-tree-id684 . -25) (undo-tree-id685 . -11) (undo-tree-id686 . -11) (undo-tree-id687 . -11) (undo-tree-id688 . -11) (undo-tree-id689 . -11) (undo-tree-id690 . -11) (undo-tree-id691 . -11) (undo-tree-id692 . -11) (undo-tree-id693 . -11) (undo-tree-id694 . -11) (undo-tree-id695 . -11) (undo-tree-id696 . -11) (undo-tree-id697 . -11) (undo-tree-id698 . -11) (undo-tree-id699 . -11) (undo-tree-id700 . -12) (undo-tree-id701 . -11) (undo-tree-id702 . -12) (undo-tree-id703 . -12) (undo-tree-id704 . -12) (undo-tree-id705 . -12) (undo-tree-id706 . -12) (undo-tree-id707 . -12) (undo-tree-id708 . -12) (undo-tree-id709 . -12) (undo-tree-id710 . -12) (undo-tree-id711 . -12) (undo-tree-id712 . -12) (undo-tree-id713 . -12) (undo-tree-id714 . -12) (undo-tree-id715 . -12) (undo-tree-id716 . -12) (undo-tree-id717 . -12) (undo-tree-id718 . -12) (undo-tree-id719 . -46) (undo-tree-id720 . -14) (undo-tree-id721 . -14) (undo-tree-id722 . -14) (undo-tree-id723 . -14) (undo-tree-id724 . -14) (undo-tree-id725 . -14) (undo-tree-id726 . -14) (undo-tree-id727 . -14) (undo-tree-id728 . -14) (undo-tree-id729 . -14) (undo-tree-id730 . -14) (undo-tree-id731 . -14) (undo-tree-id732 . -14) (undo-tree-id733 . -46) (undo-tree-id734 . -46) (undo-tree-id735 . -14) (undo-tree-id736 . -46) (undo-tree-id737 . -46) (undo-tree-id738 . -46) (undo-tree-id739 . -46) (undo-tree-id740 . -46) (undo-tree-id741 . -46) (undo-tree-id742 . -46) (undo-tree-id743 . -46) (undo-tree-id744 . -46) (undo-tree-id745 . -46) (undo-tree-id746 . -46) (undo-tree-id747 . -46) 1820) nil (26292 37689 40371 740000) 0 nil])
([nil nil ((#("
        print(\"---   starting water calibration plot\")
        try:
            calibration_path = (
                settings.calibration_path
            )  # the path is on the \"setting\" file
            df = pd.read_csv(calibration_path, sep=\";\")
            save_path = calibration_path[:-3] + \"pdf\"
            report_water_calibration(df, save_path)
            print(\"---   water calibration plot succesfully done\")
        except Exception as error:
            print(traceback.format_exc())
            print(\"---   error in water calibration plot\")
" 0 1 (fontified t) 1 9 (fontified t) 9 14 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 54 (face tree-sitter-hl-face:string fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 64 (fontified t) 64 67 (face tree-sitter-hl-face:keyword fontified t) 67 81 (fontified t) 81 97 (face tree-sitter-hl-face:variable fontified t) 97 98 (fontified t) 98 99 (face tree-sitter-hl-face:operator fontified t) 99 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 127 (fontified t) 127 143 (face tree-sitter-hl-face:property fontified t) 143 155 (fontified t) 155 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-1-face) fontified t) 157 159 (fontified t) 159 194 (face tree-sitter-hl-face:comment fontified t) 194 207 (fontified t) 207 209 (face tree-sitter-hl-face:variable fontified t) 209 210 (fontified t) 210 211 (face tree-sitter-hl-face:operator fontified t) 211 215 (fontified t) 215 223 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 223 224 (face (rainbow-delimiters-depth-1-face) fontified t) 224 242 (fontified t) 242 245 (face tree-sitter-hl-face:label fontified t) 245 246 (face tree-sitter-hl-face:operator fontified t) 246 249 (face tree-sitter-hl-face:string fontified t) 249 250 (face (rainbow-delimiters-depth-1-face) fontified t) 250 263 (fontified t) 263 272 (face tree-sitter-hl-face:variable fontified t) 272 273 (fontified t) 273 274 (face tree-sitter-hl-face:operator fontified t) 274 284 (fontified t) 284 291 (fontified t) 291 292 (face (rainbow-delimiters-depth-1-face) fontified t) 292 293 (fontified t) 293 294 (face tree-sitter-hl-face:operator fontified t) 294 295 (face tree-sitter-hl-face:number fontified t) 295 296 (face (rainbow-delimiters-depth-1-face) fontified t) 296 297 (fontified t) 297 298 (face tree-sitter-hl-face:operator fontified t) 298 299 (fontified t) 299 301 (face tree-sitter-hl-face:string fontified t) 301 302 (face tree-sitter-hl-face:string fontified t) 302 304 (face tree-sitter-hl-face:string fontified t) 304 306 (fontified t) 306 307 (fontified t) 307 308 (fontified t) 308 309 (fontified t) 309 310 (fontified t) 310 311 (fontified t) 311 312 (fontified t) 312 313 (fontified t) 313 317 (fontified t) 317 341 (face tree-sitter-hl-face:function.call fontified t) 341 342 (face (rainbow-delimiters-depth-1-face) fontified t) 342 355 (fontified t) 355 356 (face (rainbow-delimiters-depth-1-face) fontified t) 356 369 (fontified t) 369 374 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 374 375 (face (rainbow-delimiters-depth-1-face) fontified t) 375 422 (face tree-sitter-hl-face:string fontified t) 422 423 (face (rainbow-delimiters-depth-1-face) fontified t) 423 432 (fontified t) 432 438 (face tree-sitter-hl-face:keyword fontified t) 438 439 (fontified t) 439 448 (face tree-sitter-hl-face:constructor fontified t) 448 449 (fontified t) 449 451 (face tree-sitter-hl-face:keyword fontified t) 451 471 (fontified t) 471 476 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 476 477 (face (rainbow-delimiters-depth-1-face) fontified t) 477 487 (fontified t) 487 497 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 497 498 (face (rainbow-delimiters-depth-2-face) fontified t) 498 499 (face (rainbow-delimiters-depth-2-face) fontified t) 499 500 (face (rainbow-delimiters-depth-1-face) fontified t) 500 513 (fontified t) 513 518 (face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call) fontified t) 518 519 (face (rainbow-delimiters-depth-1-face) fontified t) 519 552 (face tree-sitter-hl-face:string fontified t) 552 558 (face tree-sitter-hl-face:string fontified t) 558 559 (face (rainbow-delimiters-depth-1-face) fontified t) 559 560 (fontified t)) . 1948) (undo-tree-id750 . -560) (t 26292 37689 55264 617000)) nil (26292 37742 123504 594000) 0 nil])
([nil nil ((1948 . 1957)) nil (26292 37742 123502 45000) 0 nil])
([nil nil ((1653 . 1657)) nil (26292 37742 123500 962000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified nil)) . 1656) (undo-tree-id749 . -1) (1657 . 1658)) nil (26292 37742 123499 705000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2216 . 2217) (nil fontified nil 2216 . 2217) (nil fontified nil 2215 . 2216) (nil fontified nil 2209 . 2215) (nil fontified nil 2176 . 2209) (nil fontified nil 2175 . 2176) (nil fontified nil 2170 . 2175) (nil fontified nil 2157 . 2170) (nil fontified nil 2156 . 2157) (nil fontified nil 2155 . 2156) (nil fontified nil 2154 . 2155) (nil fontified nil 2144 . 2154) (nil fontified nil 2134 . 2144) (nil fontified nil 2133 . 2134) (nil fontified nil 2128 . 2133) (nil fontified nil 2108 . 2128) (nil fontified nil 2106 . 2108) (nil fontified nil 2105 . 2106) (nil fontified nil 2096 . 2105) (nil fontified nil 2095 . 2096) (nil fontified nil 2089 . 2095) (nil fontified nil 2080 . 2089) (nil fontified nil 2079 . 2080) (nil fontified nil 2032 . 2079) (nil fontified nil 2031 . 2032) (nil fontified nil 2026 . 2031) (nil fontified nil 2013 . 2026) (nil fontified nil 2012 . 2013) (nil fontified nil 1999 . 2012) (nil fontified nil 1998 . 1999) (nil fontified nil 1974 . 1998) (nil fontified nil 1970 . 1974) (nil fontified nil 1969 . 1970) (nil fontified nil 1968 . 1969) (nil fontified nil 1967 . 1968) (nil fontified nil 1966 . 1967) (nil fontified nil 1965 . 1966) (nil fontified nil 1964 . 1965) (nil fontified nil 1963 . 1964) (nil fontified nil 1961 . 1963) (nil fontified nil 1959 . 1961) (nil fontified nil 1958 . 1959) (nil fontified nil 1956 . 1958) (nil fontified nil 1955 . 1956) (nil fontified nil 1954 . 1955) (nil fontified nil 1953 . 1954) (nil fontified nil 1952 . 1953) (nil fontified nil 1951 . 1952) (nil fontified nil 1950 . 1951) (nil fontified nil 1949 . 1950) (nil fontified nil 1948 . 1949) (nil fontified nil 1941 . 1948) (nil fontified nil 1931 . 1941) (nil fontified nil 1930 . 1931) (nil fontified nil 1929 . 1930) (nil fontified nil 1920 . 1929) (nil fontified nil 1907 . 1920) (nil fontified nil 1906 . 1907) (nil fontified nil 1903 . 1906) (nil fontified nil 1902 . 1903) (nil fontified nil 1899 . 1902) (nil fontified nil 1881 . 1899) (nil fontified nil 1880 . 1881) (nil fontified nil 1872 . 1880) (nil fontified nil 1868 . 1872) (nil fontified nil 1867 . 1868) (nil fontified nil 1866 . 1867) (nil fontified nil 1864 . 1866) (nil fontified nil 1851 . 1864) (nil fontified nil 1816 . 1851) (nil fontified nil 1814 . 1816) (nil fontified nil 1813 . 1814) (nil fontified nil 1812 . 1813) (nil fontified nil 1800 . 1812) (nil fontified nil 1784 . 1800) (nil fontified nil 1758 . 1784) (nil fontified nil 1757 . 1758) (nil fontified nil 1756 . 1757) (nil fontified nil 1755 . 1756) (nil fontified nil 1754 . 1755) (nil fontified nil 1738 . 1754) (nil fontified nil 1724 . 1738) (nil fontified nil 1721 . 1724) (nil fontified nil 1712 . 1721) (nil fontified nil 1711 . 1712) (nil fontified nil 1672 . 1711) (nil fontified nil 1671 . 1672) (nil fontified nil 1666 . 1671) (nil fontified nil 1658 . 1666) (nil fontified nil 1657 . 1658) (1657 . 2217)) nil (26292 37742 123484 907000) 0 nil])
([nil nil ((1656 . 1657)) nil (26292 37742 123469 91000) 0 nil])
([nil nil ((1657 . 1678)) nil (26292 37742 123468 196000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 1685) (1684 . 1685) (1683 . 1685) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -1683) (1678 . 1684)) nil (26292 37742 123466 544000) 0 nil])
([nil nil ((1685 . 1686)) nil (26292 37742 123464 839000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil ws-butler-chg chg)) . -2152) (2144 . 2152) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -2114) (2106 . 2114) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -2079) (2075 . 2079) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -2020) (2012 . 2020) (#("            " 0 1 (fontified nil ws-butler-chg chg) 1 2 (fontified nil ws-butler-chg chg) 2 3 (fontified nil ws-butler-chg chg) 3 4 (fontified nil ws-butler-chg chg) 4 5 (fontified nil ws-butler-chg chg) 5 6 (fontified nil ws-butler-chg chg) 6 7 (fontified nil ws-butler-chg chg) 7 8 (fontified nil ws-butler-chg chg) 8 12 (fontified nil ws-butler-chg chg)) . -1972) (1964 . 1972) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1922) (1914 . 1922) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1870) (1862 . 1870) (#("            " 0 11 (fontified nil ws-butler-chg chg) 11 12 (fontified nil ws-butler-chg chg)) . -1823) (1815 . 1823) (#("                " 0 16 (fontified nil ws-butler-chg chg)) . -1789) (1777 . 1789) (#("            " 0 12 (fontified nil ws-butler-chg chg)) . -1756) (1748 . 1756) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1743) (1739 . 1743) (#("        " 0 8 (fontified nil ws-butler-chg chg)) . -1692) (1688 . 1692) 2247) nil (26292 37742 123461 89000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . 2495) 1737) nil (26292 37742 123449 580000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . 1705) (t 26292 37742 145173 414000)) nil (26292 37776 542538 149000) 0 nil])
([nil nil ((#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1699) (undo-tree-id755 . -1) (#("-" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1700) (undo-tree-id756 . -1) (#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1701) (undo-tree-id757 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1702) (undo-tree-id758 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1703) (undo-tree-id759 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1704) (undo-tree-id760 . -1) 1705) nil (26292 37776 542533 649000) 0 nil])
([nil nil ((1699 . 1700)) nil (26292 37776 542522 336000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -1699) (undo-tree-id754 . -1) 1700) nil (26292 37776 542520 792000) 0 nil])
([nil nil ((1699 . 1700)) nil (26292 37776 542516 375000) 0 nil])
([nil nil ((1687 . 1692)) nil (26292 37776 542514 911000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 1699) (1698 . 1699) (1697 . 1699) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -1697) (1692 . 1698)) nil (26292 37776 542512 550000) 0 nil])
([nil nil ((1698 . 1719)) nil (26292 37776 542509 684000) 0 nil])
([nil nil ((1719 . 1731)) nil (26292 37776 542507 957000) 0 nil])
([nil nil ((#("é" 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified t)) . -1730) (undo-tree-id753 . -1) 1731) nil (26292 37776 542505 739000) 0 nil])
([nil nil ((1730 . 1732) (#("\"" 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified nil)) . -1730) (1730 . 1731)) nil (26292 37776 542502 933000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified nil)) . -1730) (undo-tree-id752 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified t)) . 1731)) nil (26292 37776 542501 691000) 0 nil])
([nil nil ((1698 . 1700) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -1698) (1698 . 1699)) nil (26292 37776 542499 564000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -1699) (undo-tree-id751 . -1) 1700) nil (26292 37776 542497 917000) 0 nil])
([nil nil ((1731 . 1732)) nil (26292 37776 542489 644000) 0 nil])
([nil nil ((nil rear-nonsticky nil 682 . 683) (nil fontified nil 682 . 683) (nil fontified nil 681 . 682) (nil fontified nil 649 . 681) (nil fontified nil 648 . 649) (nil fontified nil 647 . 648) (nil fontified nil 646 . 647) (nil fontified nil 641 . 646) (nil fontified nil 637 . 641) (637 . 683)) nil (26292 37776 542488 101000) 0 nil])
([nil nil ((637 . 638)) nil (26292 37776 542481 104000) 0 nil])
([nil nil ((1731 . 1740) (t 26292 37776 561296 906000)) nil (26292 37803 647571 15000) 0 nil])
([nil nil ((#("try:
" 0 1 (face tree-sitter-hl-face:keyword fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 5 (fontified t)) . -1839) (undo-tree-id765 . -5) 1844) nil (26292 37803 647569 896000) 0 nil])
([nil nil ((#("        " 0 1 (ws-butler-chg delete fontified t) 1 8 (fontified t)) . -1839)) nil (26292 37803 647568 255000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1868) 1864) nil (26292 37803 647567 642000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1898) 1894) nil (26292 37803 647566 518000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1941) (undo-tree-id764 . -4) 1937) nil (26292 37803 647565 575000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1989) (undo-tree-id763 . -4) 1985) nil (26292 37803 647563 651000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2035) (undo-tree-id762 . -4) 2031) nil (26292 37803 647560 928000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2079) (undo-tree-id761 . -4) 2075) nil (26292 37803 647559 26000) 0 nil])
([nil nil ((2133 . 2138)) nil (26292 37803 647551 809000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2086) (#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2086) (#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2086) (#("-" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2086) (#("-" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2086) (#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . 2086)) nil (26292 37803 647550 299000) 0 nil])
([nil nil ((2086 . 2087)) nil (26292 37803 647549 67000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2087)) nil (26292 37803 647548 106000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 2128) 2127) nil (26292 37803 647543 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1859) (#("
" 0 1 (fontified t)) . 1859) (t 26292 37803 664414 628000)) nil (26292 37825 725117 120000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t)) . 1884) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1884) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1884) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1884) (#("
" 0 1 (fontified t)) . 1884)) nil (26292 37825 725114 500000) 0 nil])
([nil nil ((1922 . 1927)) nil (26292 37825 725113 362000) 0 nil])
([nil nil ((1836 . 1840) (#("    " 0 4 (fontified nil)) . 1835) (undo-tree-id770 . -4) (1839 . 1840)) nil (26292 37825 725112 354000) 0 nil])
([nil nil ((2022 . 2027)) nil (26292 37825 725110 261000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 2019) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 1924) 2022) nil (26292 37825 725106 380000) 0 nil])
([nil nil ((2063 . 2068) (t 26292 37825 742570 876000)) nil (26292 37842 774699 2000) 0 nil])
([nil nil ((1835 . 1839)) nil (26292 37842 774697 109000) 0 nil])
([nil nil ((1836 . 1840) (#("    " 0 4 (ws-butler-chg chg fontified nil)) . 1835) (undo-tree-id784 . -4) (1839 . 1840)) nil (26292 37842 774694 981000) 0 nil])
([nil nil ((1840 . 1844)) nil (26292 37842 774690 727000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -1843) (undo-tree-id783 . -1) 1844) nil (26292 37842 774688 332000) 0 nil])
([nil nil ((1843 . 1844)) nil (26292 37842 774684 220000) 0 nil])
([nil nil ((1845 . 1853) (#("    " 0 4 (fontified t)) . 1845)) nil (26292 37842 774682 893000) 0 nil])
([nil nil ((1938 . 1946) (#("    " 0 4 (fontified t)) . 1938)) nil (26292 37842 774681 172000) 0 nil])
([nil nil ((2036 . 2040)) nil (26292 37842 774678 961000) 0 nil])
([nil nil ((1990 . 1998) (#("    " 0 4 (fontified t)) . 1990) (undo-tree-id782 . -4) 1994) nil (26292 37842 774676 923000) 0 nil])
([nil nil ((2045 . 2053) (#("    " 0 4 (fontified t)) . 2045)) nil (26292 37842 774671 614000) 0 nil])
([nil nil ((2098 . 2106) (#("    " 0 4 (fontified t)) . 2098) (undo-tree-id781 . -4)) nil (26292 37842 774669 182000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 2089) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 2040) 2155) nil (26292 37842 774660 813000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2233) (#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2233) (#(" " 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2233) (#("-" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2233) (#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . 2233) (t 26292 37842 793725 561000)) nil (26292 37848 207316 938000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:string ws-butler-chg delete fontified t)) . 2233)) nil (26292 37848 207313 221000) 0 nil])
([nil nil ((#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2232) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) 2233) nil (26292 37848 207304 602000) 0 nil])
([nil nil ((2232 . 2233)) nil (26292 37848 207221 694000) 0 nil])
([nil nil ((#("verbose" 0 7 (face tree-sitter-hl-face:variable.parameter fontified t)) . 1731) (t 26292 37848 228780 744000)) nil (26292 37863 151606 603000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number ws-butler-chg delete fontified t)) . 1731) (#("=" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg delete fontified t)) . 1731)) nil (26292 37863 151600 511000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2586 . 2587) (nil fontified nil 2586 . 2587) (nil fontified nil 2585 . 2586) (nil fontified nil 2584 . 2585) (nil fontified nil 2583 . 2584) (nil fontified nil 2557 . 2583) (nil fontified nil 2556 . 2557) (nil fontified nil 2553 . 2556) (2553 . 2587) (t 26292 37863 160946 268000)) nil (26292 37876 332824 423000) 0 nil])
([nil nil ((2553 . 2561)) nil (26292 37876 332822 602000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg delete)) . 2561) (#("f" 0 1 (fontified t ws-butler-chg delete)) . 2561) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 2561) (#("d" 0 1 (face tree-sitter-hl-face:keyword fontified t ws-butler-chg chg)) . 2561)) nil (26292 37876 332821 455000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t ws-butler-chg chg)) . -2589) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) 2590) nil (26292 37876 332816 234000) 0 nil])
([nil nil ((2587 . 2588) (t 26292 37876 350108 737000)) nil (26292 37902 111960 914000) 0 nil])
([nil nil ((2588 . 2589)) nil (26292 37902 111960 322000) 0 nil])
([nil nil ((#("_" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg chg fontified t)) . -2587) (undo-tree-id845 . -1) (#("l" 0 1 (face tree-sitter-hl-face:function.call ws-butler-chg chg fontified t)) . -2588) (undo-tree-id846 . -1) 2589) nil (26292 37902 111958 903000) 0 nil])
([nil nil ((2587 . 2592)) nil (26292 37902 111950 271000) 0 nil])
([nil nil ((1730 . 1731)) nil (26292 37902 111949 266000) 0 nil])
([nil nil ((1731 . 1735)) nil (26292 37902 111944 263000) 0 nil])
([nil nil ((2600 . 2608) (t 26292 37902 129467 335000)) nil (26292 37969 185919 188000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 2675) (undo-tree-id847 . -8) (undo-tree-id848 . -8) (undo-tree-id849 . -8) (undo-tree-id850 . -8) (undo-tree-id851 . -8) (undo-tree-id852 . -8) (undo-tree-id853 . -8) (undo-tree-id854 . -8) (undo-tree-id855 . -8) (undo-tree-id856 . -8) (undo-tree-id857 . -8) (undo-tree-id858 . -8) (undo-tree-id859 . -8) (undo-tree-id860 . -8) (undo-tree-id861 . -8) (undo-tree-id862 . -8) (undo-tree-id863 . -8) (undo-tree-id864 . -8) (undo-tree-id865 . -8) (undo-tree-id866 . -8) (undo-tree-id867 . -8) (undo-tree-id868 . -8) (undo-tree-id869 . -8) (undo-tree-id870 . -8) (undo-tree-id871 . -8) (undo-tree-id872 . -8) (undo-tree-id873 . -8) (undo-tree-id874 . -8) (undo-tree-id875 . -8) (undo-tree-id876 . -8) (undo-tree-id877 . -8) (undo-tree-id878 . -8) (undo-tree-id879 . -8) (undo-tree-id880 . -8) (undo-tree-id881 . -8) (undo-tree-id882 . -8) (undo-tree-id883 . -8) (undo-tree-id884 . -8) (undo-tree-id885 . -8) (undo-tree-id886 . -8) (undo-tree-id887 . -8) (undo-tree-id888 . -8) (undo-tree-id889 . -8) (undo-tree-id890 . -8) (undo-tree-id891 . -8) (undo-tree-id892 . -8) (undo-tree-id893 . -8) (undo-tree-id894 . -8) (undo-tree-id895 . -8) (undo-tree-id896 . -8) (undo-tree-id897 . -8) (undo-tree-id898 . -8) (undo-tree-id899 . -8) (undo-tree-id900 . -8) (undo-tree-id901 . -8) (undo-tree-id902 . -8) (undo-tree-id903 . -8) (undo-tree-id904 . -8) (undo-tree-id905 . -8) (undo-tree-id906 . -8) (undo-tree-id907 . -8) (undo-tree-id908 . -8) (undo-tree-id909 . -8) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 2600) (undo-tree-id910 . -8) (undo-tree-id911 . -8) (undo-tree-id912 . -8) (undo-tree-id913 . -8) (undo-tree-id914 . -8) (undo-tree-id915 . -8) (undo-tree-id916 . -8) (undo-tree-id917 . -8) (undo-tree-id918 . -8) (undo-tree-id919 . -8) (undo-tree-id920 . -8) (undo-tree-id921 . -8) (undo-tree-id922 . -8) (undo-tree-id923 . -8) (undo-tree-id924 . -8) (undo-tree-id925 . -8) (undo-tree-id926 . -8) (undo-tree-id927 . -8) (2683 . 2691)) nil (26292 37969 185911 347000) 0 nil])
([nil nil ((2675 . 2683) 2683 (t 26292 37969 197622 386000)) nil (26292 38043 157155 334000) 0 nil])
([nil nil ((184 . 185) (t 26292 37969 197622 386000)) nil (26292 38043 157152 777000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . 2676) 185) nil (26292 38043 157146 25000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -184) (undo-tree-id928 . -1) (undo-tree-id929 . -1) 185 (t 26292 38043 169196 705000)) nil (26292 38069 245492 471000) 0 nil])
([nil nil ((apply -4 2676 2786 undo--wrap-and-run-primitive-undo 2676 2786 ((nil fontified t 2742 . 2744) (2742 . 2744) (nil fontified t 2684 . 2686) (2684 . 2686) 2781))) nil (26292 40706 760544 724000) 0 nil])
([nil nil ((4402 . 4404) (t 26292 40706 761549 545000)) nil (26292 62189 916296 686000) 0 nil])
([nil nil ((4447 . 4464)) nil (26292 62189 916296 185000) 0 nil])
([nil nil ((4464 . 4472)) nil (26292 62189 916295 806000) 0 nil])
([nil nil ((4472 . 4493)) nil (26292 62189 916295 213000) 0 nil])
([nil nil ((4493 . 4504)) nil (26292 62189 916294 880000) 0 nil])
([nil nil ((4504 . 4507)) nil (26292 62189 916294 409000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t)) . -4505) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -4506) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 4507) nil (26292 62189 916292 19000) 0 nil])
([nil nil ((4505 . 4510)) nil (26292 62189 915936 515000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:property ws-butler-chg chg fontified t)) . -4509) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 4510) nil (26292 62189 915935 231000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . 4512) (4511 . 4512) (4510 . 4512) (#("(" 0 1 (face tree-sitter-hl-face:property ws-butler-chg chg fontified nil)) . -4510) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (4509 . 4511)) nil (26292 62189 915916 136000) 0 nil])
([nil nil ((624 . 625) (t 26292 62189 918188 877000)) nil (26292 62967 702944 645000) 0 nil])
([nil nil ((706 . 709) (t 26292 62967 706212 24000)) nil (26292 63027 368523 512000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -707) (undo-tree-id161 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -708) (undo-tree-id162 . -1) 709) nil (26292 63027 368522 698000) 0 nil])
([nil nil ((707 . 709)) nil (26292 63027 368521 229000) 0 nil])
([nil nil ((709 . 713)) nil (26292 63027 368520 547000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:function fontified t)) . -612) (undo-tree-id156 . -1) (#("a" 0 1 (face tree-sitter-hl-face:function fontified t)) . -613) (undo-tree-id157 . -1) (#("i" 0 1 (face tree-sitter-hl-face:function fontified t)) . -614) (undo-tree-id158 . -1) (#("l" 0 1 (face tree-sitter-hl-face:function fontified t)) . -615) (undo-tree-id159 . -1) (#("y" 0 1 (face tree-sitter-hl-face:function fontified t)) . -616) (undo-tree-id160 . -1) 617) nil (26292 63027 368519 620000) 0 nil])
([nil nil ((612 . 618)) nil (26292 63027 368516 30000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:function fontified t)) . -625) (undo-tree-id155 . -1) 626) nil (26292 63027 368515 401000) 0 nil])
([nil nil ((#("aily" 0 4 (face tree-sitter-hl-face:function.call fontified t)) . 2491)) nil (26292 63027 368514 20000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -2490) (undo-tree-id154 . -1) 2491) nil (26292 63027 368513 402000) 0 nil])
([nil nil ((2490 . 2496)) nil (26292 63027 368512 493000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . 2503)) nil (26292 63027 368511 842000) 0 nil])
([nil nil ((2997 . 3014)) nil (26292 63027 368511 280000) 0 nil])
([nil nil ((2975 . 2977)) nil (26292 63027 368511 13000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -3012) 3000) nil (26292 63027 368510 490000) 0 nil])
([nil nil ((3012 . 3013)) nil (26292 63027 368509 585000) 0 nil])
([nil nil ((3013 . 3021)) nil (26292 63027 368509 58000) 0 nil])
([nil nil ((#("9" 0 1 (face tree-sitter-hl-face:number fontified t ws-butler-chg chg)) . -3020) (undo-tree-id153 . -1) 3021) nil (26292 63027 368508 376000) 0 nil])
([nil nil ((3020 . 3022)) nil (26292 63027 368507 191000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -3019) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 3020) nil (26292 63027 368506 305000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . 3016) (undo-tree-id144 . -1)) nil (26292 63027 368496 737000) 0 nil])
([nil nil ((2565 . 2574) (t 26292 63027 370213 799000)) nil (26292 63094 804985 213000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face tree-sitter-hl-face:string ws-butler-chg chg fontified nil)) . 2579) (2578 . 2579) (2577 . 2579) (#("'" 0 1 (ws-butler-chg chg fontified nil)) . -2577) (2574 . 2578)) nil (26292 63094 804984 448000) 0 nil])
([nil nil ((2578 . 2580)) nil (26292 63094 804983 770000) 0 nil])
([nil nil ((2580 . 2583)) nil (26292 63094 804982 933000) 0 nil])
([nil nil ((2584 . 2592)) nil (26292 63094 804982 272000) 0 nil])
([nil nil ((#("        if 'water' in path
" 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 4 5 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (1 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 2566 in __main__.py> . #<marker at 13127 in __main__.py>) (#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 5 6 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 2566 in __main__.py> . #<marker at 13127 in __main__.py>) (#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 6 7 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 2566 in __main__.py> . #<marker at 13127 in __main__.py>) (#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 7 8 (highlight-indent-guides-prop (1 nil nil 1 nil ((#<marker at 2566 in __main__.py> . #<marker at 13127 in __main__.py>) (#<marker at 2291 in __main__.py> . #<marker at 13742 in __main__.py>))) ws-butler-chg chg fontified t) 8 10 (face tree-sitter-hl-face:keyword ws-butler-chg chg fontified t) 10 11 (ws-butler-chg chg fontified t) 11 18 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t) 18 19 (ws-butler-chg chg fontified t) 19 21 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t) 21 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg delete fontified t)) . 2566) (undo-tree-id163 . -27) (undo-tree-id164 . -27) (undo-tree-id165 . -26) (undo-tree-id166 . -25) (undo-tree-id167 . -1) (undo-tree-id168 . -4) (undo-tree-id169 . -5) (undo-tree-id170 . -27) (undo-tree-id171 . -1) (undo-tree-id172 . -4) (undo-tree-id173 . -5) (undo-tree-id174 . -26) (undo-tree-id175 . -26) (undo-tree-id176 . -26) (undo-tree-id177 . -26) (undo-tree-id178 . -26) (undo-tree-id179 . -26) (undo-tree-id180 . -26) (undo-tree-id181 . -26) (undo-tree-id182 . -26) (undo-tree-id183 . -26) (undo-tree-id184 . -26) (undo-tree-id185 . -26) (undo-tree-id186 . -26) (undo-tree-id187 . -26) (undo-tree-id188 . -26) (undo-tree-id189 . -26) (undo-tree-id190 . -26) (undo-tree-id191 . -26) (undo-tree-id192 . -26) (undo-tree-id193 . -26) (undo-tree-id194 . -26) (undo-tree-id195 . -26) (undo-tree-id196 . -26) (undo-tree-id197 . -26) (undo-tree-id198 . -26) (undo-tree-id199 . -26) (undo-tree-id200 . -26) (undo-tree-id201 . -26) (undo-tree-id202 . -26) (undo-tree-id203 . -26) (undo-tree-id204 . -26) (undo-tree-id205 . -27) (undo-tree-id206 . -27) (undo-tree-id207 . -8) (undo-tree-id208 . -27) (undo-tree-id209 . -26) (undo-tree-id210 . -26) (undo-tree-id211 . -26) (undo-tree-id212 . -26) (undo-tree-id213 . -26) (undo-tree-id214 . -26) (undo-tree-id215 . -26) (undo-tree-id216 . -26) (undo-tree-id217 . -26) (undo-tree-id218 . -26) (undo-tree-id219 . -26) (undo-tree-id220 . -26) (undo-tree-id221 . -26) (undo-tree-id222 . -26) (undo-tree-id223 . -26) (undo-tree-id224 . -26) (undo-tree-id225 . -26) (undo-tree-id226 . -26) (undo-tree-id227 . -26) (undo-tree-id228 . -26) (undo-tree-id229 . -26) (undo-tree-id230 . -26) (undo-tree-id231 . -26) (undo-tree-id232 . -26) (undo-tree-id233 . -26) (undo-tree-id234 . -26) (undo-tree-id235 . -26) (undo-tree-id236 . -26) (undo-tree-id237 . -26) (undo-tree-id238 . -26) (undo-tree-id239 . -26) (undo-tree-id240 . -26) (undo-tree-id241 . -26) (undo-tree-id242 . -26) (undo-tree-id243 . -26) (undo-tree-id244 . -26) (undo-tree-id245 . -26) (undo-tree-id246 . -26) (undo-tree-id247 . -26) (undo-tree-id248 . -26) (undo-tree-id249 . -26) (undo-tree-id250 . -26) (undo-tree-id251 . -26) (undo-tree-id252 . -26) (undo-tree-id253 . -26) (undo-tree-id254 . -26) (undo-tree-id255 . -26) (undo-tree-id256 . -26) (undo-tree-id257 . -26) (undo-tree-id258 . -26) (undo-tree-id259 . -26) (undo-tree-id260 . -26) (undo-tree-id261 . -26) (undo-tree-id262 . -26) (undo-tree-id263 . -26) (undo-tree-id264 . -26) (undo-tree-id265 . -26) (undo-tree-id266 . -26) (undo-tree-id267 . -26) (undo-tree-id268 . -26) (undo-tree-id269 . -26) (undo-tree-id270 . -26) (undo-tree-id271 . -26) (undo-tree-id272 . -26) (undo-tree-id273 . -26) (undo-tree-id274 . -26) (undo-tree-id275 . -26) (undo-tree-id276 . -26) (undo-tree-id277 . -26) (undo-tree-id278 . -26) (undo-tree-id279 . -26) (undo-tree-id280 . -26) (undo-tree-id281 . -26) (undo-tree-id282 . -26) (undo-tree-id283 . -26) (undo-tree-id284 . -26) (undo-tree-id285 . -26) (undo-tree-id286 . -26) (undo-tree-id287 . -26) (undo-tree-id288 . -26) (undo-tree-id289 . -26) (undo-tree-id290 . -26) (undo-tree-id291 . -26) (undo-tree-id292 . -26) (undo-tree-id293 . -26) (undo-tree-id294 . -26) (undo-tree-id295 . -26) (undo-tree-id296 . -26) (undo-tree-id297 . -26) (undo-tree-id298 . -26) (undo-tree-id299 . -27) (undo-tree-id300 . -27) (undo-tree-id301 . -27) (undo-tree-id302 . -27) (undo-tree-id303 . -27) (undo-tree-id304 . -27) (undo-tree-id305 . -27) (undo-tree-id306 . -27) (undo-tree-id307 . -27) (undo-tree-id308 . -27) (undo-tree-id309 . -27) (undo-tree-id310 . -27) 2593) nil (26292 63094 804977 72000) 0 nil])
([nil nil ((2608 . 2616) (t 26292 63094 806215 806000)) nil (26292 63096 287034 310000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 2608) (undo-tree-id311 . -8) (undo-tree-id312 . -8) (undo-tree-id313 . -8) (undo-tree-id314 . -8) (undo-tree-id315 . -8) (undo-tree-id316 . -8) (undo-tree-id317 . -8) (undo-tree-id318 . -8) (undo-tree-id319 . -8) (undo-tree-id320 . -8) (undo-tree-id321 . -8) (undo-tree-id322 . -8) (undo-tree-id323 . -8) (undo-tree-id324 . -8) (undo-tree-id325 . -8) (undo-tree-id326 . -8) (undo-tree-id327 . -8) (undo-tree-id328 . -8) (undo-tree-id329 . -8) (undo-tree-id330 . -8) (undo-tree-id331 . -8) (undo-tree-id332 . -8) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -8) (undo-tree-id336 . -8) 2616) nil (26292 63096 287030 470000) 0 nil])
([nil nil ((2574 . 2576) (t 26292 63096 290215 850000)) nil (26292 63111 389575 61000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4500) (undo-tree-id342 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified nil)) . -4501) (undo-tree-id343 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4502) (undo-tree-id344 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4503) (undo-tree-id345 . -1) 4504 (t 26292 63111 390216 300000)) nil (26292 63198 810274 963000) 0 nil])
([nil nil ((4502 . 4503) (4501 . 4503) (#("'" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified nil)) . -4501) (4500 . 4502)) nil (26292 63198 810271 342000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -4501) (undo-tree-id341 . -1) 4502) nil (26292 63198 810270 535000) 0 nil])
([nil nil ((4502 . 4506) (4501 . 4503) (#("(" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified nil)) . -4501) (4501 . 4502)) nil (26292 63198 810268 751000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -4505) (undo-tree-id340 . -1) 4506) nil (26292 63198 810267 524000) 0 nil])
([nil nil ((4505 . 4508)) nil (26292 63198 810266 211000) 0 nil])
([nil nil ((4502 . 4504) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg chg fontified nil)) . -4502) (4502 . 4503)) nil (26292 63198 810265 223000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:string ws-butler-chg chg fontified t)) . -4503) (undo-tree-id339 . -1) 4504) nil (26292 63198 810264 194000) 0 nil])
([nil nil ((4509 . 4511)) nil (26292 63198 810262 802000) 0 nil])
([nil nil ((4509 . 4510)) nil (26292 63198 810262 172000) 0 nil])
([nil nil ((4512 . 4517)) nil (26292 63198 810261 240000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg delete fontified t)) . -4517) (undo-tree-id338 . -1) 4518) nil (26292 63198 810260 308000) 0 nil])
([nil nil ((#("'" 0 1 (ws-butler-chg chg fontified t)) . -4518) (undo-tree-id337 . -1) 4519) nil (26292 63198 810255 449000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) ws-butler-chg delete fontified t)) . 4500) (#("~" 0 1 (face tree-sitter-hl-face:operator fontified t)) . 4500) (t 26292 63198 814218 902000)) nil (26292 63256 240183 154000) 0 nil])
([nil nil ((#("water" 0 1 (face tree-sitter-hl-face:string fontified t) 1 5 (face tree-sitter-hl-face:string fontified t)) . 4501) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -5)) nil (26292 63269 648476 484000) 0 nil])
([nil nil ((4501 . 4502)) nil (26292 63272 157108 823000) 0 nil] [nil nil ((4501 . 4502)) ((#("S" 0 1 (face tree-sitter-hl-face:string fontified t)) . 4501) (t 26292 63256 242220 611000)) (26292 63256 240160 98000) 0 nil])
([nil current ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -4511) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) 4512) nil (26292 63272 157104 974000) 0 nil])
nil
nil
