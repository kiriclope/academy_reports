(undo-tree-save-format-version . 1)
"6dd9a868eaabea2171bd93878d0364bdaca0f467"
[nil nil nil nil (25866 60790 931986 675000) 0 nil]
([nil nil ((nil rear-nonsticky nil 64 . 65) (nil fontified nil 39 . 40) (nil fontified nil 4 . 24) (1 . 65)) ((#("  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
" 0 2 (fontified nil face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 2 3 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 3 23 (fontified nil src-block t font-lock-fontified t) 23 25 (fontified nil src-block t font-lock-fontified t) 25 26 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 26 37 (fontified nil src-block t font-lock-fontified t) 37 38 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 38 39 (fontified nil src-block t font-lock-fontified t) 39 41 (fontified nil src-block t font-lock-fontified t) 41 42 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 42 63 (fontified nil src-block t font-lock-fontified t) 63 64 (rear-nonsticky nil fontified nil src-block t font-lock-fontified t)) . 1) (undo-tree-id657 . -64) (undo-tree-id658 . -64) (undo-tree-id659 . -64) (undo-tree-id660 . -64) (undo-tree-id661 . -64) (undo-tree-id662 . -64) (undo-tree-id663 . -64) (undo-tree-id664 . -64) (undo-tree-id665 . -64) (undo-tree-id666 . -64) (undo-tree-id667 . -64) (undo-tree-id668 . -64) (undo-tree-id669 . -64) (undo-tree-id670 . -64) (undo-tree-id671 . -64) (undo-tree-id672 . -64) (undo-tree-id673 . -64) (undo-tree-id674 . -64) (undo-tree-id675 . -64) (undo-tree-id676 . -64) (undo-tree-id677 . -64) (undo-tree-id678 . -64) (undo-tree-id679 . -64) (undo-tree-id680 . -64) (undo-tree-id681 . -2) (undo-tree-id682 . -64) (undo-tree-id683 . -64) (undo-tree-id684 . -64) (undo-tree-id685 . -64) (undo-tree-id686 . -64) (undo-tree-id687 . -2) (undo-tree-id688 . -64) (undo-tree-id689 . -64) (undo-tree-id690 . -64) (undo-tree-id691 . -64) (undo-tree-id692 . -64) (undo-tree-id693 . -64) (undo-tree-id694 . -64) (undo-tree-id695 . -64) (undo-tree-id696 . -64) (undo-tree-id697 . -64) (undo-tree-id698 . -64) (undo-tree-id699 . -64) (undo-tree-id700 . -64) (undo-tree-id701 . -64) (undo-tree-id702 . -64) (undo-tree-id703 . -64) (undo-tree-id704 . -64) (undo-tree-id705 . -64) (undo-tree-id706 . -64) (undo-tree-id707 . -64) (undo-tree-id708 . -64) (undo-tree-id709 . -64) (undo-tree-id710 . -64) (undo-tree-id711 . -64) (undo-tree-id712 . -64) (undo-tree-id713 . -64) (undo-tree-id714 . -64) (undo-tree-id715 . -64) (undo-tree-id716 . -64) (undo-tree-id717 . -64) (undo-tree-id718 . -64) (undo-tree-id719 . -64) (undo-tree-id720 . -64) (undo-tree-id721 . -64) (undo-tree-id722 . -64) (undo-tree-id723 . -64) (undo-tree-id724 . -64) (undo-tree-id725 . -64) (undo-tree-id726 . -2) (undo-tree-id727 . -64) (undo-tree-id728 . -64) (undo-tree-id729 . -64) (undo-tree-id730 . -64) (undo-tree-id731 . -64) (undo-tree-id732 . -64) (undo-tree-id733 . -64) (undo-tree-id734 . -64) (undo-tree-id735 . -64) (undo-tree-id736 . -64) (undo-tree-id737 . -64) (undo-tree-id738 . -64) (undo-tree-id739 . -64) (undo-tree-id740 . -64) (undo-tree-id741 . -64) (undo-tree-id742 . -64) (undo-tree-id743 . -64) (undo-tree-id744 . -64) (undo-tree-id745 . -64) (undo-tree-id746 . -64) (undo-tree-id747 . -64) (undo-tree-id748 . -64) (undo-tree-id749 . -64) (undo-tree-id750 . -64) (undo-tree-id751 . -64) (undo-tree-id752 . -64) (undo-tree-id753 . -64) (undo-tree-id754 . -64) (undo-tree-id755 . -64) (undo-tree-id756 . -64) (undo-tree-id757 . -64) (undo-tree-id758 . -64) (undo-tree-id759 . -64) (undo-tree-id760 . -64) (undo-tree-id761 . -2) (undo-tree-id762 . -64) (undo-tree-id763 . -64) (undo-tree-id764 . -64) (undo-tree-id765 . -64) (undo-tree-id766 . -64) (undo-tree-id767 . -64) (undo-tree-id768 . -64) (undo-tree-id769 . -64) (undo-tree-id770 . -64) (undo-tree-id771 . -64) (undo-tree-id772 . -64) (undo-tree-id773 . -64) (undo-tree-id774 . -64) (undo-tree-id775 . -64) (undo-tree-id776 . -64) (undo-tree-id777 . -64) (undo-tree-id778 . -64) (undo-tree-id779 . -64) (undo-tree-id780 . -64) (undo-tree-id781 . -64) (undo-tree-id782 . -64) (undo-tree-id783 . -64) (undo-tree-id784 . -64) (undo-tree-id785 . -64) (undo-tree-id786 . -1) (undo-tree-id787 . -2) (undo-tree-id788 . -3) (undo-tree-id789 . -64) (undo-tree-id790 . -64) (undo-tree-id791 . -64) (undo-tree-id792 . -64) (undo-tree-id793 . -64) (undo-tree-id794 . -64) (undo-tree-id795 . -64) (undo-tree-id796 . -64) (undo-tree-id797 . -64) (undo-tree-id798 . -64) (undo-tree-id799 . -64) (undo-tree-id800 . -64) (undo-tree-id801 . -64) (undo-tree-id802 . -64) (undo-tree-id803 . -64) (undo-tree-id804 . -64) (undo-tree-id805 . -64) (undo-tree-id806 . -64) (undo-tree-id807 . -64) (undo-tree-id808 . -64) (undo-tree-id809 . -64) (undo-tree-id810 . -2) (undo-tree-id811 . -3) (undo-tree-id812 . -2) (undo-tree-id813 . -22) (undo-tree-id814 . -2) (undo-tree-id815 . -22) (undo-tree-id816 . -2) (undo-tree-id817 . -22) (undo-tree-id818 . -2) (undo-tree-id819 . -22) (undo-tree-id820 . -2) (undo-tree-id821 . -22) (undo-tree-id822 . -41) (undo-tree-id823 . -63) (undo-tree-id824 . -63) (undo-tree-id825 . -64) (undo-tree-id826 . -63) (undo-tree-id827 . -64) (undo-tree-id828 . -63) (undo-tree-id829 . -64) (undo-tree-id830 . -63) (undo-tree-id831 . -64) (undo-tree-id832 . -63) (undo-tree-id833 . -64) (undo-tree-id834 . -63) (undo-tree-id835 . -64) (undo-tree-id836 . -64) (undo-tree-id837 . -64) (undo-tree-id838 . -64) (undo-tree-id839 . -64) (undo-tree-id840 . -64) (undo-tree-id841 . -64) (undo-tree-id842 . -64) (undo-tree-id843 . -64) (undo-tree-id844 . -64) (undo-tree-id845 . -64) (undo-tree-id846 . -64) (undo-tree-id847 . -64) (undo-tree-id848 . -64) (undo-tree-id849 . -64) (undo-tree-id850 . -64) (undo-tree-id851 . -64) (undo-tree-id852 . -64) (undo-tree-id853 . -64) (undo-tree-id854 . -64) (undo-tree-id855 . -64) (undo-tree-id856 . -64) (undo-tree-id857 . -64) (undo-tree-id858 . -64) (undo-tree-id859 . -63) (undo-tree-id860 . -38) (undo-tree-id861 . 25) (undo-tree-id862 . -3) (undo-tree-id863 . 41) (nil fontified t 4 . 24) (nil fontified t 39 . 40) (nil rear-nonsticky t 64 . 65)) (25866 60791 611632 570000) 0 nil])
([nil nil ((65 . 68)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 65) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -1) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -2) (undo-tree-id552 . -3) (undo-tree-id553 . -1) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -2) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -1) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -1) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3)) (25866 60791 757154 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 92 . 93) (nil fontified nil 76 . 80) (68 . 93)) ((#("  import os
  import sys
" 0 2 (fontified nil src-block t font-lock-fontified t) 2 8 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 8 12 (fontified nil src-block t font-lock-fontified t) 12 14 (fontified nil src-block t font-lock-fontified t) 14 20 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 20 23 (fontified nil src-block t font-lock-fontified t) 23 24 (fontified nil src-block t font-lock-fontified t) 24 25 (rear-nonsticky nil fontified nil src-block t font-lock-fontified t)) . 68) (undo-tree-id442 . -24) (undo-tree-id443 . -25) (undo-tree-id444 . -24) (undo-tree-id445 . -24) (undo-tree-id446 . -24) (undo-tree-id447 . -24) (undo-tree-id448 . -24) (undo-tree-id449 . -24) (undo-tree-id450 . -24) (undo-tree-id451 . -24) (undo-tree-id452 . -24) (undo-tree-id453 . -24) (undo-tree-id454 . -24) (undo-tree-id455 . -24) (undo-tree-id456 . -24) (undo-tree-id457 . -24) (undo-tree-id458 . -24) (undo-tree-id459 . -24) (undo-tree-id460 . -15) (undo-tree-id461 . -16) (undo-tree-id462 . -11) (undo-tree-id463 . -14) (undo-tree-id464 . -23) (undo-tree-id465 . -14) (undo-tree-id466 . -23) (undo-tree-id467 . -14) (undo-tree-id468 . -23) (undo-tree-id469 . -23) (undo-tree-id470 . -24) (undo-tree-id471 . -12) (undo-tree-id472 . -23) (undo-tree-id473 . 23) (undo-tree-id474 . -23) (undo-tree-id475 . -24) (undo-tree-id476 . -24) (undo-tree-id477 . 1) (undo-tree-id478 . -23) (undo-tree-id479 . 1) (undo-tree-id480 . -24) (undo-tree-id481 . 1) (undo-tree-id482 . -25) (undo-tree-id483 . -25) (undo-tree-id484 . -12) (undo-tree-id485 . -25) (undo-tree-id486 . -25) (undo-tree-id487 . -25) (undo-tree-id488 . -25) (undo-tree-id489 . -25) (undo-tree-id490 . -25) (undo-tree-id491 . -25) (undo-tree-id492 . -25) (undo-tree-id493 . -25) (undo-tree-id494 . -25) (undo-tree-id495 . -25) (undo-tree-id496 . -25) (undo-tree-id497 . -25) (undo-tree-id498 . -25) (undo-tree-id499 . -25) (undo-tree-id500 . -25) (undo-tree-id501 . -25) (undo-tree-id502 . -25) (undo-tree-id503 . -25) (undo-tree-id504 . -25) (undo-tree-id505 . -25) (undo-tree-id506 . -25) (undo-tree-id507 . -25) (undo-tree-id508 . -25) (undo-tree-id509 . -25) (undo-tree-id510 . -25) (undo-tree-id511 . -25) (undo-tree-id512 . -25) (undo-tree-id513 . -25) (undo-tree-id514 . -24) (undo-tree-id515 . -8) (undo-tree-id516 . 13) (nil fontified t 76 . 80) (nil rear-nonsticky t 92 . 93)) (25866 60791 900672 996000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified nil src-block t font-lock-fontified t)) . 93) (undo-tree-id864 . 1) (undo-tree-id865 . 1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . 1) (undo-tree-id896 . 1) (92 . 93) (#("s" 0 1 (fontified nil src-block t font-lock-fontified t)) . 91) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (92 . 93)) ((#("
" 0 1 (rear-nonsticky t fontified nil src-block t font-lock-fontified t)) . 92) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . 1) (91 . 92) (#("s" 0 1 (fontified nil src-block t font-lock-fontified t)) . 92) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (93 . 94)) (25866 60792 403133 511000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 68)) ((68 . 70)) (25866 60792 430251 526000) 0 nil])
([nil nil ((89 . 90)) ((#("s" 0 1 (fontified t src-block t font-lock-fontified t)) . 89) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1)) (25866 60792 459348 231000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t src-block t font-lock-fontified t)) . 91) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1)) ((91 . 92)) (25866 60792 491364 520000) 0 nil])
([nil nil ((#("  import os
" 0 2 (fontified t) 2 8 (face tree-sitter-hl-face:keyword fontified t src-block t font-lock-fontified t) 8 12 (fontified t src-block t font-lock-fontified t)) . 66) (undo-tree-id946 . -2) (undo-tree-id947 . -2) (undo-tree-id948 . -12) (undo-tree-id949 . -2) (undo-tree-id950 . 10) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -12) (undo-tree-id985 . -8) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -8) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -12) (undo-tree-id1048 . -2) (undo-tree-id1049 . 10) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -12)) ((66 . 78)) (25866 60792 520484 988000) 0 nil])
([nil nil ((nil rear-nonsticky nil 601 . 602) (nil fontified nil 538 . 556) (nil fontified nil 534 . 535) (nil fontified nil 488 . 489) (nil fontified nil 487 . 488) (nil fontified nil 429 . 430) (nil fontified nil 415 . 429) (nil fontified nil 396 . 397) (nil fontified nil 384 . 385) (nil fontified nil 351 . 352) (nil fontified nil 323 . 324) (nil fontified nil 275 . 276) (nil fontified nil 250 . 251) (nil fontified nil 222 . 223) (nil fontified nil 217 . 222) (nil fontified nil 195 . 199) (nil fontified nil 172 . 177) (nil fontified nil 148 . 153) (nil fontified nil 107 . 119) (nil fontified nil 95 . 99) (79 . 602)) ((#(" import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  sns.set_context(\"poster\")
  sns.set_style(\"ticks\")
  plt.rc(\"axes.spines\", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6
  height = width * golden_ratio

  matplotlib.rcParams['figure.figsize'] = [width, height]

  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
" 0 1 (fontified nil src-block t font-lock-fontified t) 1 7 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 7 14 (fontified nil src-block t font-lock-fontified t) 14 16 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 16 20 (fontified nil src-block t font-lock-fontified t) 20 22 (fontified nil src-block t font-lock-fontified t) 22 28 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 28 40 (fontified nil src-block t font-lock-fontified t) 40 42 (fontified nil src-block t font-lock-fontified t) 42 48 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 48 67 (fontified nil src-block t font-lock-fontified t) 67 69 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 69 74 (fontified nil src-block t font-lock-fontified t) 74 76 (fontified nil src-block t font-lock-fontified t) 76 82 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 82 91 (fontified nil src-block t font-lock-fontified t) 91 93 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 93 98 (fontified nil src-block t font-lock-fontified t) 98 100 (fontified nil src-block t font-lock-fontified t) 100 106 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 106 114 (fontified nil src-block t font-lock-fontified t) 114 116 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 116 120 (fontified nil src-block t font-lock-fontified t) 120 122 (fontified nil src-block t font-lock-fontified t) 122 128 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 128 136 (fontified nil src-block t font-lock-fontified t) 136 138 (face tree-sitter-hl-face:keyword fontified nil src-block t font-lock-fontified t) 138 143 (fontified nil src-block t font-lock-fontified t) 143 144 (fontified nil src-block t font-lock-fontified t) 144 146 (fontified nil src-block t font-lock-fontified t) 146 150 (fontified nil src-block t font-lock-fontified t) 150 161 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified nil src-block t font-lock-fontified t) 161 162 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 162 163 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 163 169 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 169 170 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 170 171 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 171 172 (fontified nil src-block t font-lock-fontified t) 172 174 (fontified nil src-block t font-lock-fontified t) 174 178 (fontified nil src-block t font-lock-fontified t) 178 187 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified nil src-block t font-lock-fontified t) 187 188 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 188 189 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 189 194 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 194 195 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 195 196 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 196 197 (fontified nil src-block t font-lock-fontified t) 197 199 (fontified nil src-block t font-lock-fontified t) 199 203 (fontified nil src-block t font-lock-fontified t) 203 205 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified nil src-block t font-lock-fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 206 207 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 207 218 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 218 219 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 219 221 (fontified nil src-block t font-lock-fontified t) 221 224 (face tree-sitter-hl-face:label fontified nil src-block t font-lock-fontified t) 224 225 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 225 230 (face tree-sitter-hl-face:constant.builtin fontified nil src-block t font-lock-fontified t) 230 232 (fontified nil src-block t font-lock-fontified t) 232 237 (face tree-sitter-hl-face:label fontified nil src-block t font-lock-fontified t) 237 238 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 238 243 (face tree-sitter-hl-face:constant.builtin fontified nil src-block t font-lock-fontified t) 243 244 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 244 245 (fontified nil src-block t font-lock-fontified t) 245 247 (fontified nil src-block t font-lock-fontified t) 247 255 (face tree-sitter-hl-face:variable fontified nil src-block t font-lock-fontified t) 255 256 (fontified nil src-block t font-lock-fontified t) 256 257 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 257 258 (fontified nil src-block t font-lock-fontified t) 258 259 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 259 271 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 271 272 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 272 273 (fontified nil src-block t font-lock-fontified t) 273 275 (fontified nil src-block t font-lock-fontified t) 275 287 (face tree-sitter-hl-face:variable fontified nil src-block t font-lock-fontified t) 287 288 (fontified nil src-block t font-lock-fontified t) 288 289 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 289 290 (fontified nil src-block t font-lock-fontified t) 290 291 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 291 292 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 292 294 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 294 296 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 296 297 (fontified nil src-block t font-lock-fontified t) 297 298 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 298 299 (fontified nil src-block t font-lock-fontified t) 299 300 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 300 301 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 301 302 (fontified nil src-block t font-lock-fontified t) 302 303 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 303 304 (fontified nil src-block t font-lock-fontified t) 304 305 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 305 306 (fontified nil src-block t font-lock-fontified t) 306 308 (fontified nil src-block t font-lock-fontified t) 308 313 (face tree-sitter-hl-face:variable fontified nil src-block t font-lock-fontified t) 313 314 (fontified nil src-block t font-lock-fontified t) 314 315 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 315 316 (fontified nil src-block t font-lock-fontified t) 316 317 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 317 318 (fontified nil src-block t font-lock-fontified t) 318 320 (fontified nil src-block t font-lock-fontified t) 320 326 (face tree-sitter-hl-face:variable fontified nil src-block t font-lock-fontified t) 326 327 (fontified nil src-block t font-lock-fontified t) 327 328 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 328 335 (fontified nil src-block t font-lock-fontified t) 335 336 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 336 350 (fontified nil src-block t font-lock-fontified t) 350 351 (fontified nil src-block t font-lock-fontified t) 351 353 (fontified nil src-block t font-lock-fontified t) 353 364 (fontified nil src-block t font-lock-fontified t) 364 372 (face tree-sitter-hl-face:property fontified nil src-block t font-lock-fontified t) 372 373 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 373 374 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 374 388 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 388 389 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 389 390 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 390 391 (fontified nil src-block t font-lock-fontified t) 391 392 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 392 393 (fontified nil src-block t font-lock-fontified t) 393 394 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 394 407 (fontified nil src-block t font-lock-fontified t) 407 408 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 408 409 (fontified nil src-block t font-lock-fontified t) 409 410 (fontified nil src-block t font-lock-fontified t) 410 412 (fontified nil src-block t font-lock-fontified t) 412 423 (fontified nil src-block t font-lock-fontified t) 423 431 (face tree-sitter-hl-face:property fontified nil src-block t font-lock-fontified t) 431 432 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 432 433 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 433 449 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 449 450 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified nil src-block t font-lock-fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t) 451 452 (fontified nil src-block t font-lock-fontified t) 452 453 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 453 454 (fontified nil src-block t font-lock-fontified t) 454 455 (face tree-sitter-hl-face:number fontified nil src-block t font-lock-fontified t) 455 456 (fontified nil src-block t font-lock-fontified t) 456 458 (fontified nil src-block t font-lock-fontified t) 458 459 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 459 477 (fontified nil src-block t font-lock-fontified t) 477 479 (fontified nil src-block t font-lock-fontified t) 479 480 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 480 487 (fontified nil src-block t font-lock-fontified t) 487 500 (face tree-sitter-hl-face:constructor fontified nil src-block t font-lock-fontified t) 500 501 (fontified nil src-block t font-lock-fontified t) 501 514 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:property) fontified nil src-block t font-lock-fontified t) 514 515 (fontified nil src-block t font-lock-fontified t) 515 516 (face tree-sitter-hl-face:operator fontified nil src-block t font-lock-fontified t) 516 517 (fontified nil src-block t font-lock-fontified t) 517 518 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 518 521 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 521 522 (face tree-sitter-hl-face:string fontified nil src-block t font-lock-fontified t) 522 523 (rear-nonsticky nil fontified nil src-block t font-lock-fontified t)) . 79) (undo-tree-id145 . -98) (undo-tree-id146 . -456) (undo-tree-id147 . -143) (undo-tree-id148 . -143) (undo-tree-id149 . -166) (undo-tree-id150 . -168) (undo-tree-id151 . -166) (undo-tree-id152 . -168) (undo-tree-id153 . -269) (undo-tree-id154 . -269) (undo-tree-id155 . -269) (undo-tree-id156 . -456) (undo-tree-id157 . -456) (undo-tree-id159 . -19) (undo-tree-id161 . -119) (undo-tree-id163 . -142) (undo-tree-id165 . -23) (undo-tree-id167 . -43) (undo-tree-id169 . -43) (undo-tree-id171 . -77) (undo-tree-id173 . -101) (undo-tree-id175 . -101) (undo-tree-id177 . -101) (undo-tree-id178 . -120) (undo-tree-id179 . -98) (undo-tree-id181 . -19) (undo-tree-id183 . -275) (undo-tree-id185 . -273) (undo-tree-id187 . -275) (undo-tree-id189 . -275) (undo-tree-id191 . -245) (undo-tree-id193 . -247) (undo-tree-id195 . -245) (undo-tree-id197 . -247) (undo-tree-id199 . -247) (undo-tree-id201 . -247) (undo-tree-id203 . -247) (undo-tree-id205 . -247) (undo-tree-id207 . 324) (undo-tree-id209 . -247) (undo-tree-id211 . -199) (undo-tree-id213 . -199) (undo-tree-id215 . -199) (undo-tree-id217 . -199) (undo-tree-id219 . -199) (undo-tree-id221 . -199) (undo-tree-id223 . -199) (undo-tree-id225 . -199) (undo-tree-id227 . 349) (undo-tree-id229 . -199) (undo-tree-id231 . -174) (undo-tree-id233 . -174) (undo-tree-id235 . -174) (undo-tree-id237 . -174) (undo-tree-id239 . -174) (undo-tree-id241 . -174) (undo-tree-id243 . -174) (undo-tree-id245 . -174) (undo-tree-id247 . 377) (undo-tree-id249 . -174) (undo-tree-id251 . -146) (undo-tree-id253 . -146) (undo-tree-id255 . -146) (undo-tree-id257 . -146) (undo-tree-id259 . -146) (undo-tree-id261 . -146) (undo-tree-id263 . -146) (undo-tree-id265 . -146) (undo-tree-id267 . 401) (undo-tree-id269 . -146) (undo-tree-id271 . -122) (undo-tree-id273 . -122) (undo-tree-id275 . -122) (undo-tree-id277 . -122) (undo-tree-id279 . -122) (undo-tree-id281 . -122) (undo-tree-id283 . -122) (undo-tree-id285 . -122) (undo-tree-id287 . 423) (undo-tree-id289 . -122) (undo-tree-id291 . -100) (undo-tree-id293 . -100) (undo-tree-id295 . -100) (undo-tree-id297 . -100) (undo-tree-id299 . -100) (undo-tree-id301 . -100) (undo-tree-id303 . -100) (undo-tree-id305 . -100) (undo-tree-id307 . 447) (undo-tree-id309 . -100) (undo-tree-id311 . -76) (undo-tree-id313 . -76) (undo-tree-id315 . -76) (undo-tree-id317 . -76) (undo-tree-id319 . -76) (undo-tree-id321 . -76) (undo-tree-id323 . -76) (undo-tree-id325 . -76) (undo-tree-id327 . 481) (undo-tree-id329 . -76) (undo-tree-id331 . -42) (undo-tree-id333 . -42) (undo-tree-id335 . -42) (undo-tree-id337 . 501) (undo-tree-id339 . -42) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (undo-tree-id353 . -1) (undo-tree-id355 . 380) (undo-tree-id357 . -143) (undo-tree-id359 . -143) (undo-tree-id361 . -143) (undo-tree-id363 . -143) (undo-tree-id365 . -143) (undo-tree-id367 . -143) (undo-tree-id369 . -143) (undo-tree-id371 . -143) (undo-tree-id373 . -143) (undo-tree-id375 . 522) (undo-tree-id377 . -522) (undo-tree-id379 . 46) (undo-tree-id381 . 67) (undo-tree-id383 . 113) (undo-tree-id385 . 114) (undo-tree-id387 . 172) (undo-tree-id389 . 173) (undo-tree-id391 . 205) (undo-tree-id393 . 217) (undo-tree-id395 . 250) (undo-tree-id397 . 278) (undo-tree-id399 . 326) (undo-tree-id401 . 351) (undo-tree-id403 . 379) (undo-tree-id405 . 380) (undo-tree-id407 . 403) (undo-tree-id409 . 425) (undo-tree-id411 . 449) (undo-tree-id413 . 483) (undo-tree-id415 . 503) (nil fontified t 95 . 99) (nil fontified t 107 . 119) (nil fontified t 148 . 153) (nil fontified t 172 . 177) (nil fontified t 195 . 199) (nil fontified t 217 . 222) (nil fontified t 222 . 223) (nil fontified t 250 . 251) (nil fontified t 275 . 276) (nil fontified t 323 . 324) (nil fontified t 351 . 352) (nil fontified t 384 . 385) (nil fontified t 396 . 397) (nil fontified t 415 . 429) (nil fontified t 429 . 430) (nil fontified t 487 . 488) (nil fontified t 488 . 489) (nil fontified t 534 . 535) (nil fontified t 538 . 556) (nil rear-nonsticky t 601 . 602)) (25866 60792 564317 483000) 0 nil])
([nil nil ((80 . 81)) ((#(" " 0 1 (fontified t src-block t font-lock-fontified t)) . 80) (undo-tree-id134 . -1) (undo-tree-id136 . -1) (undo-tree-id138 . -1) (undo-tree-id140 . -1) (undo-tree-id142 . -1) (undo-tree-id144 . -1)) (25866 60792 581893 386000) 0 nil])
([nil nil ((223 . 225)) ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 223)) (25866 60792 612786 6000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t face (org-block) font-lock-multiline t src-block t font-lock-fontified t)) . 1) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2)) ((1 . 3)) (25866 60792 735786 669000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 22)) ((22 . 24)) (25866 60792 736507 115000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 36) (undo-tree-id1073 . -2)) ((36 . 38)) (25866 60792 737099 931000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 60) (undo-tree-id1074 . -2)) ((60 . 62)) (25866 60792 737708 459000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t src-block t font-lock-fontified t) 1 2 (fontified t src-block t font-lock-fontified t)) . 71) (undo-tree-id1075 . -1) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2)) ((71 . 73)) (25866 60793 103313 916000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 90)) ((90 . 92)) (25866 60793 104079 24000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 108)) ((108 . 110)) (25866 60793 104749 562000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 140)) ((140 . 142)) (25866 60793 105357 603000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 162)) ((162 . 164)) (25866 60793 105983 832000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 182)) ((182 . 184)) (25866 60793 106598 848000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 206)) ((206 . 208)) (25866 60793 107215 130000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 232)) ((232 . 234)) (25866 60793 107785 114000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 255)) ((255 . 257)) (25866 60793 108415 336000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 301)) ((301 . 303)) (25866 60793 108984 259000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 327)) ((327 . 329)) (25866 60793 109577 975000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 358)) ((358 . 360)) (25866 60793 110173 520000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 368)) ((368 . 370)) (25866 60793 124886 981000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 399)) ((399 . 401)) (25866 60793 154430 251000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 456)) ((456 . 458)) (25866 60793 185013 691000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 500)) ((500 . 502)) (25866 60793 214935 544000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 519)) ((519 . 521)) (25866 60793 246356 547000) 0 nil])
([nil nil ((#("%load_ext autoreload
%autoreload 2
%reload_ext autoreload
" 0 1 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 1 21 (fontified t src-block t font-lock-fontified t) 21 22 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 22 33 (fontified t src-block t font-lock-fontified t) 33 34 (face tree-sitter-hl-face:number fontified t src-block t font-lock-fontified t) 34 35 (fontified t src-block t font-lock-fontified t) 35 36 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 36 57 (fontified t src-block t font-lock-fontified t) 57 58 (rear-nonsticky t fontified t src-block t font-lock-fontified t)) . 1) (undo-tree-id1079 . -58) (undo-tree-id1080 . -1) (undo-tree-id1081 . -20) (undo-tree-id1082 . -20) (undo-tree-id1083 . -20) (undo-tree-id1084 . -20) (undo-tree-id1085 . -20) (undo-tree-id1086 . -35) (undo-tree-id1087 . -57) (undo-tree-id1088 . -57) (undo-tree-id1089 . -58) (undo-tree-id1090 . -57) (undo-tree-id1091 . -58) (undo-tree-id1092 . 58) (undo-tree-id1093 . -21) (undo-tree-id1094 . 37) (undo-tree-id1095 . -21) (undo-tree-id1096 . -35) (undo-tree-id1097 . 23) (undo-tree-id1098 . -35)) ((1 . 59)) (25866 60793 275705 625000) 0 nil])
([nil nil ((#("%matplotlib inline
%config InlineBackend.figure_format = 'png'
" 0 1 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 1 19 (fontified t src-block t font-lock-fontified t) 19 20 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 20 27 (fontified t src-block t font-lock-fontified t) 27 40 (face tree-sitter-hl-face:constructor fontified t src-block t font-lock-fontified t) 40 41 (fontified t src-block t font-lock-fontified t) 41 54 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:property) fontified t src-block t font-lock-fontified t) 54 55 (fontified t src-block t font-lock-fontified t) 55 56 (face tree-sitter-hl-face:operator fontified t src-block t font-lock-fontified t) 56 57 (fontified t src-block t font-lock-fontified t) 57 58 (face tree-sitter-hl-face:string fontified t src-block t font-lock-fontified t) 58 61 (face tree-sitter-hl-face:string fontified t src-block t font-lock-fontified t) 61 62 (face tree-sitter-hl-face:string fontified t src-block t font-lock-fontified t) 62 63 (rear-nonsticky t fontified t src-block t font-lock-fontified t)) . 442) (undo-tree-id1099 . 63) (undo-tree-id1100 . -19) (undo-tree-id1101 . 44) (undo-tree-id1102 . -19) (undo-tree-id1103 . -19) (undo-tree-id1104 . -19) (undo-tree-id1105 . -19) (undo-tree-id1106 . -19) (undo-tree-id1107 . -19) (undo-tree-id1108 . -19) (undo-tree-id1109 . -19) (undo-tree-id1110 . -19) (undo-tree-id1111 . -19) (undo-tree-id1112 . -19) (undo-tree-id1113 . -19) (undo-tree-id1114 . -19)) ((442 . 505)) (25866 60793 306581 472000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . 1) (undo-tree-id1120 . 1) (undo-tree-id1121 . 1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . 1)) ((1 . 2) (t 25866 60773 714604 210000)) (25866 60793 370915 896000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil src-block t font-lock-fontified t)) . -145) (undo-tree-id1149 . -1) (undo-tree-id1150 . 2) (undo-tree-id1151 . -2) (144 . 145) (t 25866 60773 714604 210000)) nil (25868 21290 455103 614000) 0 nil])
([nil nil ((nil fontified nil 166 . 167) (145 . 191)) ((#("  print(\"Python exe\")
  print(sys.executable)
" 0 2 (fontified nil src-block t font-lock-fontified t) 2 7 (fontified nil face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 7 8 (fontified nil face (rainbow-delimiters-depth-1-face)) 8 9 (fontified nil face tree-sitter-hl-face:string) 9 19 (fontified nil face tree-sitter-hl-face:string) 19 20 (fontified nil face tree-sitter-hl-face:string) 20 21 (fontified nil face (rainbow-delimiters-depth-1-face)) 21 22 (fontified nil) 22 24 (fontified nil src-block t font-lock-fontified t) 24 29 (fontified nil face (tree-sitter-hl-face:function.builtin tree-sitter-hl-face:function.call)) 29 30 (fontified nil face (rainbow-delimiters-depth-1-face)) 30 34 (fontified nil) 34 44 (fontified nil face tree-sitter-hl-face:property) 44 45 (fontified nil face (rainbow-delimiters-depth-1-face)) 45 46 (fontified nil rear-nonsticky nil)) . 145) (undo-tree-id395 . -2) (undo-tree-id396 . -22) (undo-tree-id397 . 22) (undo-tree-id398 . -24) (undo-tree-id399 . -22) (undo-tree-id400 . -24) (undo-tree-id401 . -24) (undo-tree-id402 . -24) (undo-tree-id403 . -24) (undo-tree-id404 . -24) (undo-tree-id405 . -24) (undo-tree-id406 . -24) (undo-tree-id407 . -24) (undo-tree-id408 . -24) (undo-tree-id409 . -24) (undo-tree-id410 . -24) (undo-tree-id411 . -24) (undo-tree-id412 . -24) (undo-tree-id413 . -24) (undo-tree-id414 . -24) (undo-tree-id415 . -24) (undo-tree-id416 . -24) (undo-tree-id417 . -24) (undo-tree-id418 . -24) (undo-tree-id419 . -24) (undo-tree-id420 . -24) (undo-tree-id421 . -24) (undo-tree-id422 . -24) (undo-tree-id423 . -24) (undo-tree-id424 . -24) (undo-tree-id425 . -24) (undo-tree-id426 . -24) (undo-tree-id427 . -24) (undo-tree-id428 . -24) (undo-tree-id429 . 44) (undo-tree-id430 . -2) (undo-tree-id431 . -24) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -45) (undo-tree-id455 . -21) (undo-tree-id456 . 24) (nil fontified t 166 . 167) (nil rear-nonsticky nil 190 . 191)) (25868 21290 829682 929000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 145) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2)) ((145 . 147)) (25868 21290 987484 11000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 165) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . 2) (undo-tree-id512 . 2)) ((165 . 167)) (25868 21291 145504 718000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t)) . 436) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1)) ((436 . 437)) (25868 21291 302816 56000) 0 nil])
([nil nil ((#("import pickle as pkl
" 0 6 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 6 14 (fontified t src-block t font-lock-fontified t) 14 16 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 16 21 (fontified t src-block t font-lock-fontified t)) . 123)) ((123 . 144)) (25868 21291 453850 953000) 0 nil])
([nil nil ((#("import pandas as pd
" 0 6 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 6 14 (fontified t src-block t font-lock-fontified t) 14 16 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 16 20 (fontified t src-block t font-lock-fontified t)) . 103) (undo-tree-id543 . -20) (undo-tree-id544 . -20) (undo-tree-id545 . -20) (undo-tree-id546 . -20) (undo-tree-id547 . -20) (undo-tree-id548 . -20) (undo-tree-id549 . -20) (undo-tree-id550 . -20) (undo-tree-id551 . -20) (undo-tree-id552 . -20) (undo-tree-id553 . -20) (undo-tree-id554 . -20) (undo-tree-id555 . -20) (undo-tree-id556 . -20) (undo-tree-id557 . -20) (undo-tree-id558 . -20) (undo-tree-id559 . -20) (undo-tree-id560 . -20) (undo-tree-id561 . -20) (undo-tree-id562 . -20) (undo-tree-id563 . -20) (undo-tree-id564 . -20) (undo-tree-id565 . -20) (undo-tree-id566 . -20) (undo-tree-id567 . -20) (undo-tree-id568 . -20) (undo-tree-id569 . -20) (undo-tree-id570 . -20) (undo-tree-id571 . -20) (undo-tree-id572 . -20) (undo-tree-id573 . -20) (undo-tree-id574 . -20) (undo-tree-id575 . -20) (undo-tree-id576 . -20) (undo-tree-id577 . -20) (undo-tree-id578 . -20) (undo-tree-id579 . -20) (undo-tree-id580 . -20) (undo-tree-id581 . -20) (undo-tree-id582 . -20) (undo-tree-id583 . -20) (undo-tree-id584 . -20) (undo-tree-id585 . -20) (undo-tree-id586 . -20) (undo-tree-id587 . -20) (undo-tree-id588 . -20) (undo-tree-id589 . -20) (undo-tree-id590 . -20) (undo-tree-id591 . -20) (undo-tree-id592 . -20) (undo-tree-id593 . -20) (undo-tree-id594 . -20) (undo-tree-id595 . -20)) ((103 . 123)) (25868 21291 603588 193000) 0 nil])
([nil nil ((#("import numpy as np
" 0 6 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 6 13 (fontified t src-block t font-lock-fontified t) 13 15 (fontified t src-block t font-lock-fontified t face tree-sitter-hl-face:keyword) 15 19 (fontified t src-block t font-lock-fontified t)) . 12)) ((12 . 31)) (25868 21291 761342 798000) 0 nil])
([nil nil ((421 . 422)) ((#("
" 0 1 (fontified t)) . 421) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id299 . -1) (undo-tree-id301 . -1) (undo-tree-id303 . -1) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (undo-tree-id309 . -1) (undo-tree-id311 . -1) (undo-tree-id313 . -1) (undo-tree-id315 . -1) (undo-tree-id317 . -1) (undo-tree-id319 . -1) (undo-tree-id321 . -1) (undo-tree-id323 . -1) (undo-tree-id325 . -1) (undo-tree-id327 . -1) (undo-tree-id329 . -1) (undo-tree-id331 . -1) (undo-tree-id333 . -1) (undo-tree-id335 . -1) (undo-tree-id337 . -1) (undo-tree-id339 . -1) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (undo-tree-id353 . -1) (undo-tree-id355 . -1) (undo-tree-id357 . -1) (undo-tree-id359 . -1) (undo-tree-id361 . -1) (undo-tree-id363 . -1) (undo-tree-id365 . -1) (undo-tree-id367 . -1) (undo-tree-id369 . -1) (undo-tree-id371 . -1) (undo-tree-id373 . -1) (undo-tree-id375 . -1) (undo-tree-id377 . -1) (undo-tree-id379 . -1) (undo-tree-id381 . -1) (undo-tree-id383 . -1) (undo-tree-id385 . -1) (undo-tree-id387 . -1) (undo-tree-id389 . -1) (undo-tree-id391 . -1) (undo-tree-id393 . -1)) (25868 21293 516334 23000) 0 nil] [nil nil ((#("import matplotlib.pyplot as plt
" 0 6 (face tree-sitter-hl-face:keyword fontified t src-block t font-lock-fontified t) 6 25 (fontified t src-block t font-lock-fontified t) 25 27 (face tree-sitter-hl-face:keyword fontified t src-block t font-lock-fontified t) 27 32 (fontified t src-block t font-lock-fontified t)) . 30) (undo-tree-id1171 . -31) (undo-tree-id1173 . -1) (undo-tree-id1175 . -31) (undo-tree-id1176 . -32) (undo-tree-id1177 . -32)) ((30 . 62) (t 25866 60861 950413 889000)) (25866 60861 952229 943000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -421) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) 422 (t 25868 21293 941280 673000)) nil (25868 21295 177122 171000) 0 nil] [nil nil ((nil rear-nonsticky nil 780 . 781) (nil fontified nil 422 . 428) (nil fontified nil 428 . 440) (nil fontified nil 440 . 442) (nil fontified nil 442 . 447) (nil fontified nil 447 . 451) (nil fontified nil 451 . 470) (nil fontified nil 470 . 476) (nil fontified nil 476 . 477) (nil fontified nil 477 . 488) (nil fontified nil 488 . 489) (nil fontified nil 489 . 490) (nil fontified nil 490 . 501) (nil fontified nil 501 . 502) (nil fontified nil 502 . 503) (nil fontified nil 503 . 508) (nil fontified nil 508 . 523) (nil fontified nil 523 . 524) (nil fontified nil 524 . 525) (nil fontified nil 525 . 535) (nil fontified nil 535 . 536) (nil fontified nil 536 . 537) (nil fontified nil 537 . 542) (nil fontified nil 542 . 550) (nil fontified nil 550 . 551) (nil fontified nil 551 . 552) (nil fontified nil 552 . 562) (nil fontified nil 562 . 563) (nil fontified nil 563 . 564) (nil fontified nil 564 . 565) (nil fontified nil 565 . 566) (nil fontified nil 566 . 579) (nil fontified nil 579 . 580) (nil fontified nil 580 . 583) (nil fontified nil 583 . 584) (nil fontified nil 584 . 596) (nil fontified nil 596 . 597) (nil fontified nil 597 . 599) (nil fontified nil 599 . 600) (nil fontified nil 600 . 609) (nil fontified nil 609 . 614) (nil fontified nil 614 . 615) (nil fontified nil 615 . 632) (nil fontified nil 632 . 633) (nil fontified nil 633 . 644) (nil fontified nil 644 . 645) (nil fontified nil 645 . 650) (nil fontified nil 650 . 651) (nil fontified nil 651 . 652) (nil fontified nil 652 . 653) (nil fontified nil 653 . 654) (nil fontified nil 654 . 662) (nil fontified nil 662 . 667) (nil fontified nil 667 . 668) (nil fontified nil 668 . 685) (nil fontified nil 685 . 686) (nil fontified nil 686 . 697) (nil fontified nil 697 . 698) (nil fontified nil 698 . 703) (nil fontified nil 703 . 704) (nil fontified nil 704 . 705) (nil fontified nil 705 . 706) (nil fontified nil 706 . 707) (nil fontified nil 707 . 708) (nil fontified nil 708 . 709) (nil fontified nil 709 . 732) (nil fontified nil 732 . 733) (422 . 781)) ((#("import matplotlib as mpl
from matplotlib.ticker import MaxNLocator

default_dpi = mpl.rcParamsDefault['figure.dpi']
mpl.rcParams['figure.dpi'] = default_dpi

def set_locators(ax):
    ax.xaxis.set_major_locator(MaxNLocator(nbins=5))
    ax.yaxis.set_major_locator(MaxNLocator(nbins=5))

# Register the callback
mpl.figure.Figure.add_ax_dispatch(set_locators)
" 0 6 (fontified nil face tree-sitter-hl-face:keyword) 6 18 (fontified nil) 18 20 (fontified nil face tree-sitter-hl-face:keyword) 20 25 (fontified nil) 25 29 (fontified nil face tree-sitter-hl-face:keyword) 29 48 (fontified nil) 48 54 (fontified nil face tree-sitter-hl-face:keyword) 54 55 (fontified nil) 55 66 (fontified nil face tree-sitter-hl-face:constructor) 66 67 (fontified nil) 67 68 (fontified nil) 68 79 (fontified nil face tree-sitter-hl-face:variable) 79 80 (fontified nil) 80 81 (fontified nil face tree-sitter-hl-face:operator) 81 86 (fontified nil) 86 101 (fontified nil face tree-sitter-hl-face:property) 101 102 (fontified nil face (rainbow-delimiters-depth-1-face)) 102 103 (fontified nil face tree-sitter-hl-face:string) 103 113 (fontified nil face tree-sitter-hl-face:string) 113 114 (fontified nil face tree-sitter-hl-face:string) 114 115 (fontified nil face (rainbow-delimiters-depth-1-face)) 115 116 (fontified nil) 116 120 (fontified nil) 120 128 (fontified nil face tree-sitter-hl-face:property) 128 129 (fontified nil face (rainbow-delimiters-depth-1-face)) 129 130 (fontified nil face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 130 140 (fontified nil face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 140 141 (fontified nil face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 141 142 (fontified nil face (rainbow-delimiters-depth-1-face)) 142 143 (fontified nil) 143 144 (fontified nil face tree-sitter-hl-face:operator) 144 157 (fontified nil) 157 158 (fontified nil) 158 161 (fontified nil face tree-sitter-hl-face:keyword) 161 162 (fontified nil) 162 174 (fontified nil face tree-sitter-hl-face:function) 174 175 (fontified nil face (rainbow-delimiters-depth-1-face)) 175 177 (fontified nil face tree-sitter-hl-face:variable.parameter) 177 178 (fontified nil face (rainbow-delimiters-depth-1-face)) 178 180 (fontified nil) 180 187 (fontified nil) 187 192 (fontified nil face tree-sitter-hl-face:property) 192 193 (fontified nil) 193 210 (fontified nil face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 210 211 (fontified nil face (rainbow-delimiters-depth-1-face)) 211 222 (fontified nil face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 222 223 (fontified nil face (rainbow-delimiters-depth-2-face)) 223 228 (fontified nil face tree-sitter-hl-face:label) 228 229 (fontified nil face tree-sitter-hl-face:operator) 229 230 (fontified nil face tree-sitter-hl-face:number) 230 231 (fontified nil face (rainbow-delimiters-depth-2-face)) 231 232 (fontified nil face (rainbow-delimiters-depth-1-face)) 232 233 (fontified nil) 233 240 (fontified nil) 240 245 (fontified nil face tree-sitter-hl-face:property) 245 246 (fontified nil) 246 263 (fontified nil face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 263 264 (fontified nil face (rainbow-delimiters-depth-1-face)) 264 275 (fontified nil face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 275 276 (fontified nil face (rainbow-delimiters-depth-2-face)) 276 281 (fontified nil face tree-sitter-hl-face:label) 281 282 (fontified nil face tree-sitter-hl-face:operator) 282 283 (fontified nil face tree-sitter-hl-face:number) 283 284 (fontified nil face (rainbow-delimiters-depth-2-face)) 284 285 (fontified nil face (rainbow-delimiters-depth-1-face)) 285 286 (fontified nil) 286 287 (fontified nil) 287 310 (fontified nil face tree-sitter-hl-face:comment) 310 311 (fontified nil) 311 315 (fontified nil) 315 321 (fontified nil face tree-sitter-hl-face:property) 321 322 (fontified nil) 322 328 (fontified nil face (tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 328 329 (fontified nil) 329 344 (fontified nil face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 344 345 (fontified nil face (rainbow-delimiters-depth-1-face)) 345 357 (fontified nil) 357 358 (fontified nil face (rainbow-delimiters-depth-1-face)) 358 359 (rear-nonsticky nil fontified nil)) . 422) (undo-tree-id596 . -25) (undo-tree-id597 . -157) (undo-tree-id598 . -311) (undo-tree-id599 . -358) (undo-tree-id600 . 353) (undo-tree-id601 . -25) (undo-tree-id602 . 330) (undo-tree-id603 . -67) (undo-tree-id604 . 291) (undo-tree-id605 . -115) (undo-tree-id606 . 239) (undo-tree-id607 . -157) (undo-tree-id608 . 201) (undo-tree-id609 . -178) (undo-tree-id610 . 172) (undo-tree-id611 . -232) (undo-tree-id612 . 119) (undo-tree-id613 . -286) (undo-tree-id614 . 72) (nil fontified t 708 . 709) (nil fontified t 655 . 662) (nil fontified t 602 . 609) (nil fontified t 579 . 580) (nil fontified t 538 . 542) (nil fontified t 489 . 490) (nil fontified t 447 . 451) (nil fontified t 422 . 428) (nil rear-nonsticky t 780 . 781)) (25868 21292 552332 320000) 0 nil])
nil
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:string fontified t)) . 243) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . 243) (undo-tree-id2 . 1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . 243) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . 243) (t 25882 46856 922251 945000)) nil (25882 46871 465338 74000) 0 nil])
([nil nil ((#("import matplotlib as mpl
" 0 6 (fontified t face tree-sitter-hl-face:keyword) 6 18 (fontified t) 18 20 (fontified t face tree-sitter-hl-face:keyword) 20 25 (fontified t)) . 422) (undo-tree-id9 . -25) (undo-tree-id10 . -25) (undo-tree-id11 . -25)) ((422 . 447)) (25868 21287 810726 890000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t face tree-sitter-hl-face:number)) . -284) (undo-tree-id0 . -1) 285 (t 25882 46871 466201 647000)) nil (25920 56869 785480 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36 . 37) (nil fontified nil 32 . 37) (nil fontified nil 30 . 32) (nil fontified nil 18 . 30) (nil fontified nil 12 . 18) (12 . 37)) ((#("import matplotlib as mpl
" 0 6 (fontified nil face tree-sitter-hl-face:keyword) 6 18 (fontified nil) 18 20 (fontified nil face tree-sitter-hl-face:keyword) 20 24 (fontified nil) 24 25 (fontified nil rear-nonsticky nil)) . 12) (undo-tree-id225 . -25) (undo-tree-id226 . -1) (undo-tree-id227 . -25) (undo-tree-id228 . -25) (undo-tree-id229 . -24) (undo-tree-id230 . -25) (undo-tree-id231 . -25) (undo-tree-id232 . -25) (undo-tree-id233 . -25) (undo-tree-id234 . -24) (nil rear-nonsticky t 36 . 37)) (25868 21287 652458 455000) 0 nil])
([nil nil ((284 . 285)) nil (25920 56869 785451 782000) 0 nil])
([nil nil ((#("import matplotlib
" 0 6 (fontified t face tree-sitter-hl-face:keyword) 6 18 (fontified t)) . -37) (undo-tree-id7 . -18) (undo-tree-id8 . -18) 55) ((37 . 55)) (25868 21287 478533 136000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -284) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 285 (t 25920 56869 786679 427000)) nil (25920 57421 989195 119000) 0 nil])
([nil nil ((#("matplotlib" 0 10 (fontified t)) . 328)) ((328 . 338)) (25868 21287 321177 263000) 0 nil])
([nil nil ((284 . 287)) nil (25920 57557 336148 802000) 0 nil])
([nil nil ((330 . 330) (330 . 331) (328 . 328) (328 . 330)) ((#("mp" 0 2 (fontified nil)) . 328) (undo-tree-id224 . -2) (#("l" 0 1 (fontified t)) . 330)) (25868 21287 162660 174000) 0 nil])
([nil nil ((449 . 450) (nil rear-nonsticky nil 448 . 449) (nil fontified nil 419 . 449) (419 . 449) (t 25920 57421 989183 482000)) nil (25920 57558 173400 250000) 0 nil] [nil nil ((nil rear-nonsticky nil 488 . 489) (nil fontified nil 419 . 489) (419 . 489) (t 25920 57421 989183 482000)) ((#("https://towardsdatascience.com/change-font-size-matplolib-480630e300b4" 0 5 (fontified nil face tree-sitter-hl-face:variable) 5 6 (fontified nil) 6 8 (fontified nil face tree-sitter-hl-face:operator) 8 27 (fontified nil) 27 30 (fontified nil face tree-sitter-hl-face:property) 30 31 (fontified nil face tree-sitter-hl-face:operator) 31 37 (fontified nil) 37 38 (fontified nil face tree-sitter-hl-face:operator) 38 42 (fontified nil) 42 43 (fontified nil face tree-sitter-hl-face:operator) 43 47 (fontified nil) 47 48 (fontified nil face tree-sitter-hl-face:operator) 48 57 (fontified nil) 57 58 (fontified nil face tree-sitter-hl-face:operator) 58 68 (fontified nil face tree-sitter-hl-face:number) 68 69 (fontified nil) 69 70 (fontified nil rear-nonsticky nil)) . 419) (undo-tree-id18 . -70) (undo-tree-id19 . -70) (undo-tree-id20 . -58) (undo-tree-id21 . -70) (undo-tree-id22 . -6) (undo-tree-id23 . -7) (undo-tree-id24 . -68) (undo-tree-id25 . -69) (undo-tree-id26 . -70) (undo-tree-id27 . -69) (nil rear-nonsticky t 488 . 489)) (25920 57557 335209 863000) 0 nil])
([nil nil ((#("matplotlib" 0 10 (fontified t)) . 377)) ((377 . 387)) (25868 21287 5371 676000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 419) (#("l" 0 1 (fontified t)) . 419) (#("p" 0 1 (fontified t)) . 419) (t 25920 57558 176814 543000)) nil (25920 57568 520698 171000) 0 nil])
nil
([nil nil ((379 . 379) (379 . 380) (378 . 378) (378 . 379) (377 . 377) (377 . 378)) ((#("m" 0 1 (fontified nil)) . 377) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("p" 0 1 (fontified nil)) . 378) (undo-tree-id223 . -1) (#("l" 0 1 (fontified t)) . 379)) (25868 21286 846637 980000) 0 nil])
([nil nil ((419 . 422)) nil (25920 57568 520696 731000) 0 nil])
([nil nil ((#("from matplotlib.ticker import MaxNLocator
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 23 (fontified t) 23 29 (fontified t face tree-sitter-hl-face:keyword) 29 30 (fontified t) 30 41 (fontified t face tree-sitter-hl-face:constructor) 41 42 (fontified t)) . 415) (undo-tree-id5 . -42) (undo-tree-id6 . -42) 457) ((415 . 457)) (25868 21286 696673 754000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -421) (undo-tree-id37 . -1) 422) nil (25920 57568 520695 783000) 0 nil])
([nil nil ((91 . 92)) ((#("
" 0 1 (fontified t)) . 91) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1)) (25868 21286 530897 777000) 0 nil])
([nil nil ((421 . 426)) nil (25920 57568 520693 832000) 0 nil])
([nil nil ((nil rear-nonsticky nil 133 . 134) (nil fontified nil 133 . 134) (nil fontified nil 122 . 133) (nil fontified nil 121 . 122) (nil fontified nil 115 . 121) (nil fontified nil 96 . 115) (nil fontified nil 92 . 96) (92 . 134)) ((#("from matplotlib.ticker import MaxNLocator
" 0 4 (fontified nil face tree-sitter-hl-face:keyword) 4 23 (fontified nil) 23 29 (fontified nil face tree-sitter-hl-face:keyword) 29 30 (fontified nil) 30 41 (fontified nil face tree-sitter-hl-face:constructor) 41 42 (fontified nil rear-nonsticky nil)) . 92) (undo-tree-id84 . -42) (undo-tree-id85 . -42) (undo-tree-id86 . -1) (undo-tree-id87 . -42) (undo-tree-id88 . -42) (undo-tree-id89 . -42) (undo-tree-id90 . -42) (undo-tree-id91 . -42) (undo-tree-id92 . -42) (undo-tree-id93 . -42) (undo-tree-id94 . -42) (undo-tree-id95 . -42) (undo-tree-id96 . -42) (undo-tree-id97 . -42) (undo-tree-id98 . -42) (undo-tree-id99 . -42) (undo-tree-id100 . -42) (undo-tree-id101 . -42) (undo-tree-id102 . -42) (undo-tree-id103 . -42) (undo-tree-id104 . -42) (undo-tree-id105 . -42) (undo-tree-id106 . -42) (undo-tree-id107 . -42) (undo-tree-id108 . -42) (undo-tree-id109 . -42) (undo-tree-id110 . -42) (undo-tree-id111 . -42) (undo-tree-id112 . -42) (undo-tree-id113 . -42) (undo-tree-id114 . -42) (undo-tree-id115 . -42) (undo-tree-id116 . -42) (undo-tree-id117 . -42) (undo-tree-id118 . -42) (undo-tree-id119 . -42) (undo-tree-id120 . -42) (undo-tree-id121 . -42) (undo-tree-id122 . -42) (undo-tree-id123 . -42) (undo-tree-id124 . -42) (undo-tree-id125 . -42) (undo-tree-id126 . -42) (undo-tree-id127 . -42) (undo-tree-id128 . -42) (undo-tree-id129 . -42) (undo-tree-id130 . -42) (undo-tree-id131 . -42) (undo-tree-id132 . -42) (undo-tree-id133 . -42) (undo-tree-id134 . -42) (undo-tree-id135 . -42) (undo-tree-id136 . -42) (undo-tree-id137 . -42) (undo-tree-id138 . -41) (nil rear-nonsticky t 133 . 134)) (25868 21286 365353 129000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -422) (undo-tree-id33 . -1) (#("k" 0 1 (fontified t)) . -423) (undo-tree-id34 . -1) (#("i" 0 1 (fontified t)) . -424) (undo-tree-id35 . -1) (#("t" 0 1 (fontified t)) . -425) (undo-tree-id36 . -1) 426) nil (25920 57568 520692 328000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -456) (undo-tree-id4 . -1) 457) ((456 . 457)) (25868 21286 215405 230000) 0 nil])
([nil nil ((422 . 425)) nil (25920 57568 520687 608000) 0 nil])
([nil nil ((#("
def set_locators(ax):
    ax.xaxis.set_major_locator(MaxNLocator(nbins=5))
    ax.yaxis.set_major_locator(MaxNLocator(nbins=5))
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 17 (fontified t face tree-sitter-hl-face:function) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 20 (fontified t face tree-sitter-hl-face:variable.parameter) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 30 (fontified t) 30 35 (fontified t face tree-sitter-hl-face:property) 35 36 (fontified t) 36 53 (fontified t face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 53 54 (fontified t face (rainbow-delimiters-depth-1-face)) 54 65 (fontified t face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 71 (fontified t face tree-sitter-hl-face:label) 71 72 (fontified t face tree-sitter-hl-face:operator) 72 73 (fontified t face tree-sitter-hl-face:number) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t face (rainbow-delimiters-depth-1-face)) 75 83 (fontified t) 83 88 (fontified t face tree-sitter-hl-face:property) 88 89 (fontified t) 89 106 (fontified t face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 106 107 (fontified t face (rainbow-delimiters-depth-1-face)) 107 118 (fontified t face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 118 119 (fontified t face (rainbow-delimiters-depth-2-face)) 119 124 (fontified t face tree-sitter-hl-face:label) 124 125 (fontified t face tree-sitter-hl-face:operator) 125 126 (fontified t face tree-sitter-hl-face:number) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 128 (fontified t face (rainbow-delimiters-depth-1-face)) 128 129 (fontified t)) . 547) (undo-tree-id2 . -129) (undo-tree-id3 . -129)) ((547 . 676)) (25868 21286 65211 333000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -423) (undo-tree-id31 . -1) (#("i" 0 1 (fontified t)) . -424) (undo-tree-id32 . -1) 425) nil (25920 57568 520686 409000) 0 nil])
([nil nil ((134 . 135)) ((#("
" 0 1 (fontified t)) . 134) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1)) (25868 21285 900514 378000) 0 nil])
([nil nil ((423 . 425)) nil (25920 57568 520683 583000) 0 nil])
([nil nil ((nil rear-nonsticky nil 263 . 264) (nil fontified nil 263 . 264) (nil fontified nil 262 . 263) (nil fontified nil 261 . 262) (nil fontified nil 260 . 261) (nil fontified nil 259 . 260) (nil fontified nil 254 . 259) (nil fontified nil 253 . 254) (nil fontified nil 242 . 253) (nil fontified nil 241 . 242) (nil fontified nil 224 . 241) (nil fontified nil 223 . 224) (nil fontified nil 218 . 223) (nil fontified nil 210 . 218) (nil fontified nil 209 . 210) (nil fontified nil 208 . 209) (nil fontified nil 207 . 208) (nil fontified nil 206 . 207) (nil fontified nil 201 . 206) (nil fontified nil 200 . 201) (nil fontified nil 189 . 200) (nil fontified nil 188 . 189) (nil fontified nil 171 . 188) (nil fontified nil 170 . 171) (nil fontified nil 165 . 170) (nil fontified nil 156 . 165) (nil fontified nil 155 . 156) (nil fontified nil 153 . 155) (nil fontified nil 152 . 153) (nil fontified nil 140 . 152) (nil fontified nil 139 . 140) (nil fontified nil 136 . 139) (nil fontified nil 135 . 136) (135 . 264)) ((#("
def set_locators(ax):
    ax.xaxis.set_major_locator(MaxNLocator(nbins=5))
    ax.yaxis.set_major_locator(MaxNLocator(nbins=5))
" 0 1 (fontified nil) 1 4 (fontified nil face tree-sitter-hl-face:keyword) 4 5 (fontified nil) 5 17 (fontified nil face tree-sitter-hl-face:function) 17 18 (fontified nil face (rainbow-delimiters-depth-1-face)) 18 20 (fontified nil face tree-sitter-hl-face:variable.parameter) 20 21 (fontified nil face (rainbow-delimiters-depth-1-face)) 21 23 (fontified nil) 23 30 (fontified nil) 30 35 (fontified nil face tree-sitter-hl-face:property) 35 36 (fontified nil) 36 53 (fontified nil face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 53 54 (fontified nil face (rainbow-delimiters-depth-1-face)) 54 65 (fontified nil face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 65 66 (fontified nil face (rainbow-delimiters-depth-2-face)) 66 71 (fontified nil face tree-sitter-hl-face:label) 71 72 (fontified nil face tree-sitter-hl-face:operator) 72 73 (fontified nil face tree-sitter-hl-face:number) 73 74 (fontified nil face (rainbow-delimiters-depth-2-face)) 74 75 (fontified nil face (rainbow-delimiters-depth-1-face)) 75 76 (fontified nil) 76 83 (fontified nil) 83 88 (fontified nil face tree-sitter-hl-face:property) 88 89 (fontified nil) 89 106 (fontified nil face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property)) 106 107 (fontified nil face (rainbow-delimiters-depth-1-face)) 107 118 (fontified nil face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call)) 118 119 (fontified nil face (rainbow-delimiters-depth-2-face)) 119 124 (fontified nil face tree-sitter-hl-face:label) 124 125 (fontified nil face tree-sitter-hl-face:operator) 125 126 (fontified nil face tree-sitter-hl-face:number) 126 127 (fontified nil face (rainbow-delimiters-depth-2-face)) 127 128 (fontified nil face (rainbow-delimiters-depth-1-face)) 128 129 (rear-nonsticky nil fontified nil)) . 135) (undo-tree-id12 . -129) (undo-tree-id13 . -12) (undo-tree-id14 . -1) (undo-tree-id15 . 128) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -128) (undo-tree-id50 . -75) (undo-tree-id51 . 46) (undo-tree-id52 . -21) (undo-tree-id53 . 99) (undo-tree-id54 . 128) (nil fontified t 135 . 136) (nil fontified t 156 . 158) (nil fontified t 210 . 211) (nil rear-nonsticky t 263 . 264)) (25868 21285 725632 243000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -424) (undo-tree-id30 . -1) 425) nil (25920 57568 520682 224000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -135) (undo-tree-id0 . -1) 136) ((135 . 136) (t 25868 21241 585491 772000)) (25868 21241 585495 926000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -422) (undo-tree-id28 . -1) (#("p" 0 1 (fontified t)) . -423) (undo-tree-id29 . -1) 424) nil (25920 57568 520678 178000) 0 nil])
nil
([nil nil ((422 . 429)) nil (25920 57568 520661 127000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t rear-nonsticky t face tree-sitter-hl-face:number)) . -455) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 456 (t 25920 57568 520786 521000)) nil (25920 57584 828176 806000) 0 nil])
([nil nil ((455 . 456)) nil (25920 57584 828051 748000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -146) (undo-tree-id111 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -147) (undo-tree-id112 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -148) (undo-tree-id113 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -149) (undo-tree-id114 . -1) 150 (t 25920 57584 832742 331000)) nil (25920 57609 838388 740000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . 146)) nil (25920 57609 838371 477000) 0 nil])
([nil nil ((146 . 150)) nil (25920 57609 838366 568000) 0 nil])
([nil nil ((#("matplotlib.rcParams['font.size'] = 12
" 0 10 (fontified t) 10 11 (fontified t) 11 19 (fontified t face tree-sitter-hl-face:property) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (fontified t face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 21 30 (fontified t face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 30 31 (fontified t face (tree-sitter-hl-face:variable tree-sitter-hl-face:string)) 31 32 (fontified t face (rainbow-delimiters-depth-1-face)) 32 33 (fontified t) 33 34 (fontified t face tree-sitter-hl-face:operator) 34 35 (fontified t) 35 37 (fontified t face tree-sitter-hl-face:number) 37 38 (fontified t)) . -418) (undo-tree-id115 . -37) (undo-tree-id116 . -38) (undo-tree-id117 . -37) (undo-tree-id118 . -37) (undo-tree-id119 . -38) (undo-tree-id120 . -38) (undo-tree-id121 . -38) (undo-tree-id122 . -38) (undo-tree-id123 . -38) (undo-tree-id124 . -38) (undo-tree-id125 . -38) (undo-tree-id126 . -38) (undo-tree-id127 . -38) (undo-tree-id128 . -38) (undo-tree-id129 . -38) (undo-tree-id130 . -38) (undo-tree-id131 . -38) (undo-tree-id132 . -38) (undo-tree-id133 . -38) (undo-tree-id134 . -38) (undo-tree-id135 . -38) (undo-tree-id136 . -38) (undo-tree-id137 . -38) (undo-tree-id138 . -38) (undo-tree-id139 . -38) (undo-tree-id140 . -38) (undo-tree-id141 . -38) (undo-tree-id142 . -38) (undo-tree-id143 . -38) (undo-tree-id144 . -38) (undo-tree-id145 . -38) 456 (t 25920 57609 840674 583000)) nil (25920 57613 38503 170000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -145) (undo-tree-id170 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -146) (undo-tree-id171 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -147) (undo-tree-id172 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -148) (undo-tree-id173 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -149) (undo-tree-id174 . -1) 150 (t 25920 57613 40665 915000)) nil (25920 57699 433551 203000) 0 nil])
([nil nil ((145 . 153)) nil (25920 57699 433545 156000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:string)) . -152) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 153) nil (25920 57699 433541 669000) 0 nil])
([nil nil ((152 . 153)) nil (25920 57699 433505 662000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -145) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -146) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -147) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -148) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -149) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -150) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -151) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -152) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 153 (t 25920 57699 436431 864000)) nil (25920 57717 544567 252000) 0 nil])
([nil nil ((145 . 146)) nil (25920 57717 544528 369000) 0 nil])
([nil nil ((146 . 151)) nil (25920 57717 544523 781000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -286) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 287 (t 25920 57717 544382 808000)) nil (25920 57739 749905 843000) 0 nil])
([nil nil ((286 . 287)) nil (25920 57739 749877 141000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -284) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:number)) . -285) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("8" 0 1 (fontified t face tree-sitter-hl-face:number)) . -286) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) 287 (t 25920 57739 752322 646000)) nil (25920 57755 437945 843000) 0 nil])
([nil nil ((284 . 285)) nil (25920 57755 437741 350000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -284) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 285 (t 25920 57755 440280 147000)) nil (25935 37822 750055 433000) 0 nil])
([nil nil ((284 . 285)) nil (25935 37822 749353 201000) 0 nil])
([nil nil ((243 . 245) (t 25935 37822 754281 64000)) nil (25935 37835 252192 944000) 0 nil])
([nil nil ((245 . 250)) nil (25935 37835 252191 133000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -244) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -245) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -246) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -247) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -248) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -249) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 250) nil (25935 37835 252169 161000) 0 nil])
([nil nil ((nil rear-nonsticky nil 170 . 171) (nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 156 . 169) (nil fontified nil 155 . 156) (nil fontified nil 147 . 155) (nil fontified nil 145 . 147) (nil fontified nil 137 . 145) (nil fontified nil 136 . 137) (nil fontified nil 130 . 136) (nil fontified nil 129 . 130) (nil fontified nil 117 . 129) (nil fontified nil 104 . 117) (nil fontified nil 94 . 104) (nil fontified nil 88 . 94) (nil fontified nil 84 . 88) (84 . 171) (t 25935 37835 254281 462000)) nil (26032 59774 766866 12000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -85) (undo-tree-id8 . -4) (84 . 85)) nil (26032 59774 766860 961000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -102) (undo-tree-id7 . -4) (101 . 102)) nil (26032 59774 766857 941000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -101) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 102) nil (26032 59774 766852 315000) 0 nil])
([nil nil ((#("7" 0 1 (face tree-sitter-hl-face:number fontified t)) . -364) (undo-tree-id0 . -1) 365 (t 26292 54644 69964 315000)) nil (26292 54666 692966 117000) 0 nil])
([nil nil ((364 . 366)) nil (26292 54666 692938 968000) 0 nil])
([nil nil ((nil rear-nonsticky nil 704 . 705) (nil fontified nil 704 . 705) (nil fontified nil 699 . 704) (nil fontified nil 698 . 699) (nil fontified nil 697 . 698) (nil fontified nil 696 . 697) (nil fontified nil 695 . 696) (nil fontified nil 678 . 695) (nil fontified nil 677 . 678) (nil fontified nil 669 . 677) (nil fontified nil 661 . 669) (nil fontified nil 660 . 661) (nil fontified nil 655 . 660) (nil fontified nil 654 . 655) (nil fontified nil 653 . 654) (nil fontified nil 652 . 653) (nil fontified nil 651 . 652) (nil fontified nil 632 . 651) (nil fontified nil 631 . 632) (nil fontified nil 623 . 631) (nil fontified nil 615 . 623) (nil fontified nil 614 . 615) (nil fontified nil 613 . 614) (nil fontified nil 612 . 613) (nil fontified nil 611 . 612) (nil fontified nil 610 . 611) (nil fontified nil 609 . 610) (nil fontified nil 598 . 609) (nil fontified nil 597 . 598) (nil fontified nil 589 . 597) (nil fontified nil 581 . 589) (nil fontified nil 580 . 581) (nil fontified nil 579 . 580) (nil fontified nil 578 . 579) (nil fontified nil 577 . 578) (nil fontified nil 576 . 577) (nil fontified nil 575 . 576) (nil fontified nil 557 . 575) (nil fontified nil 556 . 557) (nil fontified nil 548 . 556) (nil fontified nil 540 . 548) (nil fontified nil 539 . 540) (nil fontified nil 536 . 539) (nil fontified nil 535 . 536) (nil fontified nil 534 . 535) (nil fontified nil 533 . 534) (nil fontified nil 532 . 533) (nil fontified nil 515 . 532) (nil fontified nil 514 . 515) (nil fontified nil 506 . 514) (nil fontified nil 498 . 506) (498 . 705) (t 26292 54666 693964 988000)) nil (26292 54711 218387 554000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -498)) nil (26292 54711 218383 308000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -536)) nil (26292 54711 218382 487000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -573)) nil (26292 54711 218382 98000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -603)) nil (26292 54711 218381 656000) 0 nil])
([nil nil ((#("    " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 1 2 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 2 3 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 3 4 (highlight-indent-guides-prop (0 nil nil 1 nil ((#<marker at 498 in setup.py> . #<marker at 719 in setup.py>))) fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -645)) nil (26292 54711 218381 174000) 0 nil])
([nil nil ((498 . 502)) nil (26292 54711 218380 669000) 0 nil])
([nil nil ((#(" " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 542 in setup.py>))) ws-butler-chg delete fontified t)) . 498) (#(" " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 542 in setup.py>))) ws-butler-chg delete fontified t)) . 498) (#(" " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 542 in setup.py>))) ws-butler-chg delete fontified t)) . 498) (#(" " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop (0 nil t 1 (character nil (face highlight-indent-guides-character-face display "│")) ((#<marker at 498 in setup.py> . #<marker at 542 in setup.py>))) ws-butler-chg chg fontified t)) . 498)) nil (26292 54711 218379 701000) 0 nil])
([nil nil ((nil font-lock-fontified t 680 . 681) (nil src-block t 680 . 681) (nil ws-butler-chg delete 680 . 681) (nil fontified t 680 . 681) (#("mpl" 0 1 (fontified t ws-butler-chg delete src-block t font-lock-fontified t) 1 3 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -673) (676 . 686) (nil font-lock-fontified t 631 . 632) (nil src-block t 631 . 632) (nil ws-butler-chg delete 631 . 632) (nil fontified t 631 . 632) (#("mpl" 0 1 (fontified t ws-butler-chg delete src-block t font-lock-fontified t) 1 3 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -624) (627 . 637) (nil font-lock-fontified t 594 . 595) (nil src-block t 594 . 595) (nil ws-butler-chg delete 594 . 595) (nil fontified t 594 . 595) (#("mpl" 0 1 (fontified t ws-butler-chg delete src-block t font-lock-fontified t) 1 3 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -587) (590 . 600) (nil font-lock-fontified t 550 . 551) (nil src-block t 550 . 551) (nil ws-butler-chg delete 550 . 551) (nil fontified t 550 . 551) (#("mpl" 0 1 (fontified t ws-butler-chg delete src-block t font-lock-fontified t) 1 3 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -543) (546 . 556) (nil font-lock-fontified t 505 . 506) (nil src-block t 505 . 506) (nil ws-butler-chg delete 505 . 506) (nil fontified t 505 . 506) (#("mpl" 0 1 (fontified t ws-butler-chg delete src-block t font-lock-fontified t) 1 3 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -498) (501 . 511)) nil (26292 54711 218938 277000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -364) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 365 (t 26292 54712 621966 355000)) nil (26292 54729 904510 215000) 0 nil] [nil nil ((#("right\"] = " 0 6 (face (tree-sitter-hl-face:variable tree-sitter-hl-face:string) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t ws-butler-chg chg src-block t font-lock-fontified t) 7 8 (fontified t ws-butler-chg chg src-block t font-lock-fontified t) 8 9 (face tree-sitter-hl-face:operator fontified t ws-butler-chg chg src-block t font-lock-fontified t) 9 10 (fontified t ws-butler-chg chg src-block t font-lock-fontified t)) . -657) (undo-tree-id1 . -10) (undo-tree-id2 . -10) (undo-tree-id3 . -10) (undo-tree-id4 . -10) (undo-tree-id5 . -10) (undo-tree-id6 . -10) (undo-tree-id7 . -10) (undo-tree-id8 . -10) (undo-tree-id9 . -10) (undo-tree-id10 . -10) (undo-tree-id11 . -10) (undo-tree-id12 . -10) (undo-tree-id13 . -10) 667) ((nil ws-butler-chg delete 667 . 668) (657 . 667)) (26292 54711 218371 873000) 0 nil])
([nil nil ((364 . 365)) nil (26292 54729 904488 798000) 0 nil])
nil
([nil nil ((325 . 327) (t 26292 54729 905966 869000)) nil (26292 54793 437652 935000) 0 nil])
([nil nil ((#("#" 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified t)) . -325) (undo-tree-id44 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment ws-butler-chg chg fontified t)) . -326) (undo-tree-id45 . -1) 327) nil (26292 54793 437652 5000) 0 nil])
([nil nil ((#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -382) (undo-tree-id30 . -1) (#(" " 0 1 (fontified t)) . -383) (undo-tree-id31 . -1) (#("g" 0 1 (fontified t)) . -384) (undo-tree-id32 . -1) (#("o" 0 1 (fontified t)) . -385) (undo-tree-id33 . -1) (#("l" 0 1 (fontified t)) . -386) (undo-tree-id34 . -1) (#("d" 0 1 (fontified t)) . -387) (undo-tree-id35 . -1) (#("e" 0 1 (fontified nil)) . -388) (undo-tree-id36 . -1) (#("n" 0 1 (fontified nil)) . -389) (undo-tree-id37 . -1) (#("_" 0 1 (fontified nil)) . -390) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t)) . -391) (undo-tree-id39 . -1) (#("a" 0 1 (fontified t)) . -392) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t)) . -393) (undo-tree-id41 . -1) (#("i" 0 1 (fontified t)) . -394) (undo-tree-id42 . -1) (#("o" 0 1 (fontified t)) . -395) (undo-tree-id43 . -1) 396) nil (26292 54793 437648 835000) 0 nil])
([nil nil ((382 . 383)) nil (26292 54793 437638 321000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator ws-butler-chg chg fontified t)) . -382) (undo-tree-id29 . -1) 383) nil (26292 54793 437636 748000) 0 nil])
([nil nil ((382 . 385)) nil (26292 54793 437620 257000) 0 nil])
([nil nil ((#("2" 0 1 (face tree-sitter-hl-face:number fontified t)) . -364) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -365) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 366 (t 26292 54793 437968 760000)) nil (26292 54817 733385 50000) 0 nil])
([nil nil ((364 . 365)) nil (26292 54817 733379 814000) 0 nil])
([nil nil ((#("2" 0 1 (face tree-sitter-hl-face:number ws-butler-chg chg fontified t)) . -364) (undo-tree-id46 . -1) 365) nil (26292 54817 733378 748000) 0 nil])
([nil nil ((364 . 365)) nil (26292 54817 733363 89000) 0 nil])
([nil nil ((#("7" 0 1 (face tree-sitter-hl-face:number fontified t)) . -364) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 365 (t 26292 54817 733969 483000)) nil (26292 54837 749582 93000) 0 nil])
([nil nil ((364 . 366)) nil (26292 54837 749554 929000) 0 nil])
([nil nil ((#("3" 0 1 (face tree-sitter-hl-face:number fontified t)) . -384) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 385 (t 26292 54837 749970 79000)) nil (26292 54848 868396 143000) 0 nil])
([nil nil ((384 . 386)) nil (26292 54848 868304 456000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number ws-butler-chg chg fontified t)) . -384) (undo-tree-id95 . -1) (#("." 0 1 (face tree-sitter-hl-face:number ws-butler-chg chg fontified t)) . -385) (undo-tree-id96 . -1) 386) nil (26292 54848 868303 452000) 0 nil])
([nil nil ((#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -382) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -383) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 384) nil (26292 54848 868300 179000) 0 nil])
([nil nil ((382 . 388)) nil (26292 54848 868276 637000) 0 nil])
([nil nil ((388 . 396)) nil (26292 54848 868271 961000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -365) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 366 (t 26292 54848 869970 410000)) nil (26292 54889 525052 546000) 0 nil])
([nil current ((365 . 366)) nil (26292 54889 524969 700000) 0 nil])
nil
